//------------------------------------------------------------------------------
//
// 说明： 该文件中的内容是由代码生成器自动生成的，请勿手工修改！
//
// file name：CustomerProcessingAccessor.autogenerated.cs
// author: mayanjun
// create date：2010-7-30 19:31:56
//
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Text;

namespace Book.DA.SQLServer
{
    public partial class CustomerProcessingAccessor
    {
		public Model.CustomerProcessing Get(string id)
		{
			return this.Get<Model.CustomerProcessing>(id);
		}

        public void Insert(Model.CustomerProcessing e)
		{
			this.Insert<Model.CustomerProcessing>(e);
		}

        public void Update(Model.CustomerProcessing e)
		{
			this.Update<Model.CustomerProcessing>(e);
		}

        public IList<Model.CustomerProcessing> Select()
		{
			return this.Select<Model.CustomerProcessing>();
		}
		
		public IList<Model.CustomerProcessing> Select(Helper.OrderDescription orderDescription, Helper.PagingDescription pagingDescription)
		{
			return this.Select<Model.CustomerProcessing>(orderDescription,pagingDescription);
		}
		public void Delete(string id)
		{
			this.Delete<Model.CustomerProcessing>(id);
		}
		public bool HasRows(string id)
		{
			return this.HasRows<Model.CustomerProcessing>(id);
		}
		public bool HasRows()
		{
			return this.HasRows<Model.CustomerProcessing>();
		}
		public int Count()
		{
			return this.Count<Model.CustomerProcessing>();
		}
		public bool HasRowsBefore(Model.CustomerProcessing e)
		{
			return sqlmapper.QueryForObject<bool>("CustomerProcessing.has_rows_before", e);
		}
		public bool HasRowsAfter(Model.CustomerProcessing e)
		{
			return sqlmapper.QueryForObject<bool>("CustomerProcessing.has_rows_after", e);
		}
		public Model.CustomerProcessing GetFirst()
		{
			return sqlmapper.QueryForObject<Model.CustomerProcessing>("CustomerProcessing.get_first", null);
		}
		public Model.CustomerProcessing GetLast()
		{
			return sqlmapper.QueryForObject<Model.CustomerProcessing>("CustomerProcessing.get_last", null);
		}
		public Model.CustomerProcessing GetNext(Model.CustomerProcessing e)
		{
			return sqlmapper.QueryForObject<Model.CustomerProcessing>("CustomerProcessing.get_next", e);
		}
		public Model.CustomerProcessing GetPrev(Model.CustomerProcessing e)
		{
			return sqlmapper.QueryForObject<Model.CustomerProcessing>("CustomerProcessing.get_prev", e);
		}
		

		public bool Exists(string id)
		{
			return sqlmapper.QueryForObject<bool>("CustomerProcessing.exists", id);
		}
		
		public Model.CustomerProcessing GetById(string id)
		{
			return sqlmapper.QueryForObject<Model.CustomerProcessing>("CustomerProcessing.get_by_id", id);
		}
		
		public bool ExistsExcept(Model.CustomerProcessing e)
		{
			Hashtable paras = new Hashtable();
			paras.Add("newId", e.Id);
            paras.Add("oldId", Get(e.CustomerProcessingId)==null?null:Get(e.CustomerProcessingId).Id);
			return sqlmapper.QueryForObject<bool>("CustomerProcessing.existsexcept", paras);
		}
		
		
		
		public bool ExistsPrimary(string id)
		{			
			return sqlmapper.QueryForObject<bool>("CustomerProcessing.existsPrimary", id);
		}
    }
}
