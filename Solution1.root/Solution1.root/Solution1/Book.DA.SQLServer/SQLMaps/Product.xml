<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="Product" xmlns="http://ibatis.apache.org/mapping"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<resultMaps>
		<resultMap id="ProductResult1" class="Product">
			<result property="ProductId" column="ProductId" />
			<result property="Id" column="Id" />
			<result property="ProductName" column="ProductName" />
			<result property="MainUnitId" column="MainUnitId" />
			<result property="BasedUnitGroupId" column="BasedUnitGroupId" />
			<result property="DepotPositionId" column="DepotPositionId" />
			<result property="DepotUnitId" column="DepotUnitId" />
			<result property="StocksQuantity" column="StocksQuantity" />
			<result property="CustomerProductName" column="CustomerProductName" />
			<result property="ProductDescription" column="ProductDescription" />
			<result property="ProductCategoryId" column="ProductCategoryId" />
			<result property="ProductCategoryName" column="ProductCategoryName" />
			<result property="ProduceUnitId" column="ProduceUnitId" />
			<result property="CustomerId" column="CustomerId" />
			<result property="DepotUnit" column="DepotUnitId" lazyLoad="false" select="ProductUnit.select_by_primary_key" />
			<result property="MainUnit" column="MainUnitId" lazyLoad="false" select="ProductUnit.select_by_primary_key" />
			<result property="BasedUnitGroup" column="BasedUnitGroupId" lazyLoad="false" select="UnitGroup.select_by_primary_key" />
			<result property="ProductCategory" column="ProductCategoryId" lazyLoad="false" select="ProductCategory.select_by_primary_key" />
			<result property="ProduceUnit" column="ProduceUnitId" lazyLoad="false" select="ProductUnit.select_by_primary_key" />
			<result property="Customer" column="CustomerId" lazyLoad="false" select="Customer.select_by_primary_key" />
		</resultMap>
		<resultMap id="ProductResult2" class="Product">
			<result property="ProductId" column="ProductId" />
			<result property="Id" column="Id" />
			<result property="ProductName" column="ProductName" />
			<result property="ProductCategoryId" column="ProductCategoryId" />
			<result property="CustomerProductName" column="CustomerProductName" />
			<result property="IsCustomerProduct" column="IsCustomerProduct" />
		</resultMap>
		<resultMap id="ProductResult3" class="Product">
			<result property="ProductId" column="ProductId" />
			<result property="Id" column="Id" />
			<result property="ProductName" column="ProductName" />
		</resultMap>
		<resultMap id="ProductResult4" class="Product">
			<result property="ProductId" column="ProductId" />
			<result property="Id" column="Id" />
			<result property="DepotUnitId" column="DepotUnitId" />
			<result property="ProductName" column="ProductName" />
			<result property="StocksQuantity" column="StocksQuantity" />
			<result property="CustomerProductName" column="CustomerProductName" />
			<result property="ProductDescription" column="ProductDescription" />
			<result property="ProductCategoryId" column="ProductCategoryId" />
			<result property="ProductCategoryName" column="ProductCategoryName" />
			<result property="ProductCategory" column="ProductCategoryId" lazyLoad="false" select="ProductCategory.select_by_primary_key" />
			<result property="DepotUnit" column="DepotUnitId" lazyLoad="false" select="ProductUnit.select_by_primary_key" />
		</resultMap>
		
	</resultMaps>
	<statements>
		<select id="select_product" resultMap="ProductResult">
			select * from product where productid in (select distinct productid from SpecialProfitMargin)
		</select>
		
		<select id="select_datatable">
			select * from product
		</select>
		<update id="update_cost1" parameterClass="Map">
			<![CDATA[
			update product set  ProductStandardCost = 
case ((select sum(stockquantity1) from stock where productid=#productid#) + #quantity#)
when 0 then 
(select product.ProductStandardCost from product where productid = #productid#)
else
(
					select ((select product.ProductStandardCost from product where productid = #productid#) * 
					(select sum(stockquantity1) from stock where productid=#productid#)
					+ 
					#quantity# * #unitprice#)
					/ 
					((select sum(stockquantity1) from stock where productid=#productid#) + #quantity#)
					)
			end
where ProductId = #productid#
			]]>
		</update>
		<select id="select_byCategory" resultMap="ProductResult" parameterClass="string">
			select * from product where ProductCategoryId = #value# order by Id
		</select>
		<select id="select_byDepot" resultMap="ProductResult" parameterClass="string">
			select *   from product
			where product.productID in(select productID from stock where DepotPositionId
			in(select DepotPositionId from DepotPosition where depotID=#value#) group by productID )
		</select>

		<select id="ExistsNameInsert" resultClass="bool" parameterClass="string">
			<![CDATA[
			select case when exists(
				select * 
				from dbo.Product
				where productName = #value#
				) then 1 else 0 end
			]]>
		</select>

		<select id="ExistsNameUpdate" resultClass="bool" parameterClass="Map">
			<![CDATA[
				select case when exists(
				select *
				from dbo.Product
				where productName = #newName# and productName <> #oldName#
				)
				then 1 else 0 end
			]]>
		</select>
		<!--查询指定客户的货品和公司货品-->
		<select id="SelectByCustomer" resultMap="ProductResult1" parameterClass="string">
			<![CDATA[
      select ProductId,ProductName,product.ProductCategoryId,ProduceUnitId,StocksQuantity,ProductCategoryName,DepotPositionId,DepotUnitId,ProductDescription, product.Id,MainUnitId,BasedUnitGroupId,CustomerProductName,CustomerId from product left join ProductCategory
      on ProductCategory.ProductCategoryId=Product.ProductCategoryId order by Id    
      ]]>
			<!--CustomerProductName desc-->
		</select>
		<!--查询指定客户的货品-->
		<select id="SelectProductByCustomer" resultMap="ProductResult" parameterClass="string">
			<![CDATA[
      select * from product where customerid=#value# and IsCustomerProduct=1
       order by id  
      ]]>
			<!--CustomerProductName desc-->
		</select>
		<!--查询指定类型和客户的货品和公司货品-->

		<select id="SelectByCategoryAndCustomer" resultMap="ProductResult" parameterClass="string">
			<![CDATA[   select * from product where  (ProductCategoryId=#productcategoryid# and customerid=#customerid#) or       (ProductCategoryId=#productcategoryid# and (IsCustomerProduct=0 or IsCustomerProduct is null)  )   order by Id 	]]>
		</select>
		<delete id="deleteByCustomPro"  parameterClass="Map">
			delete * from product where productid=#productid# and customerid=#customerid#
		</delete>
		<select id="selectByProductAndCustomer" resultMap="ProductResult" parameterClass="string">
			<![CDATA[
      select * from product where customerid=#customerid# and productid=#productid# order by  id  
      ]]>
			<!--CustomerProductName desc-->
		</select>

		<select id="GetProduct" resultMap="ProductResult1">
			SELECT product.Id,ProductId,ProductName,product.ProductCategoryId,ProduceUnitId,StocksQuantity,ProductCategoryName,DepotPositionId,DepotUnitId,CustomerProductName,BasedUnitGroupId,MainUnitId,ProductDescription,CustomerId FROM Product left join ProductCategory
			on ProductCategory.ProductCategoryId=Product.ProductCategoryId order by  ProductName
		</select>

		<select id="GetProductByCondition" resultMap="ProductResult4" parameterClass="Map">
			<![CDATA[
			SELECT p.Id,ProductId,p.ProductName,p.StocksQuantity,p.DepotUnitId,c.ProductCategoryId,c.ProductCategoryName,p.CustomerProductName,p.ProductDescription
			FROM Product p left join ProductCategory c on c.ProductCategoryId=p.ProductCategoryId where (c.ProductCategoryId = #ProductCategoryName# or #ProductCategoryName# ='' or #ProductCategoryName# is null) and ( p.ProductName like '%$pt$%' or p.Id like '%$pt$%' or p.CustomerProductName like '%$pt$%' or #pt#='' or #pt# is null) order by ProductName
			]]>
		</select>

		<select id="select_byCategoryTo" resultMap="ProductResult2">
			SELECT Id,ProductId,ProductName,ProductCategoryId,CustomerProductName,IsCustomerProduct FROM Product  where    ProductCategoryId = #value# order by ProductName
		</select>
		<select id="select_notcustomer" resultMap="ProductResult1">
			select  product.Id,ProductId,ProductName,product.ProductCategoryId,ProduceUnitId,StocksQuantity,ProductCategoryName,DepotPositionId,DepotUnitId,CustomerProductName,BasedUnitGroupId,MainUnitId,ProductDescription,CustomerId FROM Product left join ProductCategory
			on ProductCategory.ProductCategoryId=Product.ProductCategoryId  where IsCustomerProduct=0 or IsCustomerProduct is null order by ProductName
		</select>
		<select id="select_notcustomer1" resultMap="ProductResult3">
			select  Id,ProductId,ProductName from Product  where IsCustomerProduct=0 or IsCustomerProduct is null order by ProductName
		</select>
		<select id="select_notcustomerByCate" resultMap="ProductResult1" parameterClass="string">
			select  product.Id,ProductId,ProductName,product.ProductCategoryId,ProduceUnitId,StocksQuantity,ProductCategoryName,DepotPositionId,DepotUnitId,CustomerProductName,BasedUnitGroupId,MainUnitId,ProductDescription,CustomerId FROM Product left join ProductCategory
			on ProductCategory.ProductCategoryId=Product.ProductCategoryId  where (IsCustomerProduct=0 or IsCustomerProduct is null) and product.ProductCategoryId=#value#  order by ProductName
		</select>
		<select id="select_byIdOrNameKey" resultMap="ProductResult1" parameterClass="string">
			SELECT product.Id,ProductId,ProductName,product.ProductCategoryId,ProduceUnitId,StocksQuantity,ProductCategoryName,DepotPositionId,DepotUnitId,CustomerProductName,BasedUnitGroupId,MainUnitId,ProductDescription,CustomerId FROM Product left join ProductCategory
			on ProductCategory.ProductCategoryId=Product.ProductCategoryId where ( product.id like '%$id$%' or #id# is null) and (ProductName like '%$name$%' or #name# is null) and (CustomerProductName like '%$customerProductName$%' or #customerProductName# is null)
		</select>
		<select id="select_ProceProduct" resultMap="ProductResult"  parameterClass="Map">
			<![CDATA[
			SELECT * FROM Product  where  (ProceebeforeProductId=#ProceebeforeProductId# OR productid=#ProceebeforeProductId#) and productid<>#productId#
			   ]]>
		</select>
		 <select id="select_WhereSQL" resultMap="ProductResult" parameterClass="string">
			 <![CDATA[ 	SELECT * FROM Product where $value$   ]]>		
		</select>
		<select id="select_ALLIdOrNameKey" resultMap="ProductResult" parameterClass="string">
			SELECT * from product where (id like '%$id$%' or #id# is null) and (ProductName like '%$name$%' or #name# is null) and (CustomerProductName like '%$customerProductName$%' or #customerProductName# is null)
		</select>

	</statements>
</sqlMap>
		