<?xml version="1.0" encoding="utf-8" ?> 
<sqlMap namespace="Pronotedetails" xmlns="http://ibatis.apache.org/mapping" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <alias>
        <typeAlias alias="Pronotedetails" type="Book.Model.Pronotedetails, Book.Model" />
    </alias>
    <resultMaps>                                    
        <resultMap id="PronotedetailsResult" class="Pronotedetails">
			<result property="PronotedetailsID" column="PronotedetailsID" />
			<result property="PronoteHeaderID" column="PronoteHeaderID" />
			<result property="ProductId" column="ProductId" />
			<result property="DetailsSum" column="DetailsSum" />
			<result property="ProductUnit" column="ProductUnit" />
			<result property="ProductStock" column="ProductStock" />
			<result property="MPSheaderId" column="MPSheaderId" />
			<result property="InDepotQuantity" column="InDepotQuantity" />
			<result property="Checkeds" column="Checkeds" />
			<result property="InvoiceXOId" column="InvoiceXOId" />
			<result property="InvoiceXODetailId" column="InvoiceXODetailId" />
			<result property="PrimaryKeyId" column="PrimaryKeyId" />
			<result property="MPSDetailId" column="MPSDetailId" />
			<result property="MRSHeaderId" column="MRSHeaderId" />
			<result property="MRSdetailsId" column="MRSdetailsId" />
		<result property="Product" column="ProductId" lazyLoad="false" select="Product.select_by_primary_key" />		<result property="PronoteHeader" column="PronoteHeaderID" lazyLoad="false" select="PronoteHeader.select_by_primary_key" />		<result property="PrimaryKey" column="PrimaryKeyId" lazyLoad="false" select="CustomerProducts.select_by_primary_key" />
        </resultMap>
    </resultMaps>
		
    <statements>
		<select id="has_rows_of" resultClass="bool">
			select case when exists(
				SELECT
					*
				FROM
					[dbo].[Pronotedetails]
				WHERE
				[PronotedetailsID] = #PronotedetailsID#
				) then 1 else 0 end
		</select>
		<select id="has_rows" resultClass="bool">
			select case when exists(
				SELECT
					*
				FROM
					[dbo].[Pronotedetails]
 								
				) then 1 else 0 end
		</select>
		<!-- select by primary key -->
        <select id="select_by_primary_key" resultMap="PronotedetailsResult" parameterClass="Pronotedetails">
			SELECT
				[PronotedetailsID],
				[PronoteHeaderID],
				[ProductId],
				[DetailsSum],
				[ProductUnit],
				[ProductStock],
				[MPSheaderId],
				[InDepotQuantity],
				[Checkeds],
				[InvoiceXOId],
				[InvoiceXODetailId],
				[PrimaryKeyId],
				[MPSDetailId],
				[MRSHeaderId],
				[MRSdetailsId]
			FROM
				[dbo].[Pronotedetails]
			WHERE
				[PronotedetailsID] = #PronotedetailsID#
        </select>
		
		<!-- delete -->
        <delete id="delete" parameterClass="string">
			DELETE FROM [dbo].[Pronotedetails]
			WHERE
				[PronotedetailsID] = #PronotedetailsID#
        </delete>

		<!-- select all -->
        <select id="select_all" resultMap="PronotedetailsResult" >
			SELECT *
			FROM 
				[dbo].[Pronotedetails]
			
			
        </select>
        
		<select id="count_all" resultClass="int">
			select count(*)
			from 
				[dbo].[Pronotedetails]
		</select>
		
		<select id="select_all_with_paging" resultMap="PronotedetailsResult">
            SELECT *
            FROM
            (
                SELECT *, row_number() over(order by $OrderStatement$) rownumber
                FROM    
                    [dbo].[Pronotedetails]
            ) t
            WHERE t.rownumber between #Row1# and #Row2#
		</select>
		
		<!-- insert -->
        <insert id="insert" parameterClass="Pronotedetails">
			INSERT INTO [dbo].[Pronotedetails] 
			(
				[PronotedetailsID],
				[PronoteHeaderID],
				[ProductId],
				[DetailsSum],
				[ProductUnit],
				[ProductStock],
				[MPSheaderId],
				[InDepotQuantity],
				[Checkeds],
				[InvoiceXOId],
				[InvoiceXODetailId],
				[PrimaryKeyId],
				[MPSDetailId],
				[MRSHeaderId],
				[MRSdetailsId]
			) 
			VALUES 
			(
				#PronotedetailsID#,
				#PronoteHeaderID#,
				#ProductId#,
				#DetailsSum#,
				#ProductUnit#,
				#ProductStock#,
				#MPSheaderId#,
				#InDepotQuantity#,
				#Checkeds#,
				#InvoiceXOId#,
				#InvoiceXODetailId#,
				#PrimaryKeyId#,
				#MPSDetailId#,
				#MRSHeaderId#,
				#MRSdetailsId#
			)
        </insert>
		
		<!-- update -->
        <update id="update" parameterClass="Pronotedetails">
			UPDATE [Pronotedetails] SET
				[PronoteHeaderID] = #PronoteHeaderID#,
				[ProductId] = #ProductId#,
				[DetailsSum] = #DetailsSum#,
				[ProductUnit] = #ProductUnit#,
				[ProductStock] = #ProductStock#,
				[MPSheaderId] = #MPSheaderId#,
				[InDepotQuantity] = #InDepotQuantity#,
				[Checkeds] = #Checkeds#,
				[InvoiceXOId] = #InvoiceXOId#,
				[InvoiceXODetailId] = #InvoiceXODetailId#,
				[PrimaryKeyId] = #PrimaryKeyId#,
				[MPSDetailId] = #MPSDetailId#,
				[MRSHeaderId] = #MRSHeaderId#,
				[MRSdetailsId] = #MRSdetailsId#
			WHERE
				[PronotedetailsID] = #PronotedetailsID#
        </update>
		<select id="existsPrimary" resultClass="bool" parameterClass="string">
			<![CDATA[
			select case when exists(
				select *
				from [dbo].[Pronotedetails]
				where  PronotedetailsID = #value# 
				)
				then 1 else 0 end
			]]>
		</select>
		
    </statements>
</sqlMap>

