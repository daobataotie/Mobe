<?xml version="1.0" encoding="utf-8" ?> 
<sqlMap namespace="AtBillsIncome" xmlns="http://ibatis.apache.org/mapping" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <alias>
        <typeAlias alias="AtBillsIncome" type="Book.Model.AtBillsIncome, Book.Model" />
    </alias>
    <resultMaps>                                    
        <resultMap id="AtBillsIncomeResult" class="AtBillsIncome">
			<result property="BillsId" column="BillsId" />
			<result property="IncomeCategory" column="IncomeCategory" />
			<result property="Checks" column="Checks" />
			<result property="BillsOften" column="BillsOften" />
			<result property="BillsCategory" column="BillsCategory" />
			<result property="DepartmentId" column="DepartmentId" />
			<result property="ProjectId" column="ProjectId" />
			<result property="PassingObject" column="PassingObject" />
			<result property="BankAccount" column="BankAccount" />
			<result property="CollectionAccount" column="CollectionAccount" />
			<result property="NotesAccount" column="NotesAccount" />
			<result property="NotesBank" column="NotesBank" />
			<result property="NotesMoney" column="NotesMoney" />
			<result property="StrengtheningMoney" column="StrengtheningMoney" />
			<result property="Chinese" column="Chinese" />
			<result property="Rate" column="Rate" />
			<result property="SummonId" column="SummonId" />
			<result property="OtherSubject" column="OtherSubject" />
			<result property="ASummary" column="ASummary" />
			<result property="Passenger" column="Passenger" />
			<result property="Up" column="Up" />
			<result property="Endorsement" column="Endorsement" />
			<result property="Parallel" column="Parallel" />
			<result property="Mark" column="Mark" />
			<result property="TheOpenDate" column="TheOpenDate" />
			<result property="Maturity" column="Maturity" />
			<result property="TheJpy" column="TheJpy" />
			<result property="MoveDay" column="MoveDay" />
			<result property="InsertTime" column="InsertTime" />
			<result property="UpdateTime" column="UpdateTime" />
			<result property="Id" column="Id" />
		<result property="Summon" column="SummonId" lazyLoad="false" select="AtSummon.select_by_primary_key" />		<result property="Department" column="DepartmentId" lazyLoad="false" select="Department.select_by_primary_key" />
        </resultMap>
    </resultMaps>
		
    <statements>
		<select id="has_rows_of" resultClass="bool">
			select case when exists(
				SELECT
					*
				FROM
					[dbo].[AtBillsIncome]
				WHERE
				[BillsId] = #BillsId#
				) then 1 else 0 end
		</select>
		<select id="has_rows" resultClass="bool">
			select case when exists(
				SELECT
					*
				FROM
					[dbo].[AtBillsIncome]
 								
				) then 1 else 0 end
		</select>
		<select id="get_first" resultMap="AtBillsIncomeResult">
			<![CDATA[
			select top 1 *
			from dbo.AtBillsIncome 
			order by InsertTime
			]]>
		</select>
		<select id="get_last" resultMap="AtBillsIncomeResult">
			<![CDATA[
			select top 1 *
			from dbo.AtBillsIncome 			
			order by InsertTime desc
			]]>
		</select>
		<select id="get_prev" resultMap="AtBillsIncomeResult" parameterClass="AtBillsIncome">
			<![CDATA[
			select top 1 *
			from dbo.AtBillsIncome
			where InsertTime < #InsertTime#
			order by InsertTime desc
			]]>
		</select>
		<select id="get_next" resultMap="AtBillsIncomeResult" parameterClass="AtBillsIncome">
			<![CDATA[
			select top 1 *
			from dbo.AtBillsIncome
			where InsertTime > #InsertTime#
			order by InsertTime
			]]>
		</select>
		<select id="has_rows_before" resultClass="bool" parameterClass="AtBillsIncome">
			<![CDATA[
			select case when exists(
				select * 
				from dbo.AtBillsIncome
				where InsertTime < #InsertTime#
				) 
				then 1 else 0 end
			]]>
		</select>
		
		<select id="has_rows_after" resultClass="bool" parameterClass="AtBillsIncome">
			<![CDATA[
			select case when exists(
				select * 
				from dbo.AtBillsIncome
				where InsertTime > #InsertTime#
				) then 1 else 0 end
			]]>
		</select>
		<!-- select by primary key -->
        <select id="select_by_primary_key" resultMap="AtBillsIncomeResult" parameterClass="AtBillsIncome">
			SELECT
				[BillsId],
				[IncomeCategory],
				[Checks],
				[BillsOften],
				[BillsCategory],
				[DepartmentId],
				[ProjectId],
				[PassingObject],
				[BankAccount],
				[CollectionAccount],
				[NotesAccount],
				[NotesBank],
				[NotesMoney],
				[StrengtheningMoney],
				[Chinese],
				[Rate],
				[SummonId],
				[OtherSubject],
				[ASummary],
				[Passenger],
				[Up],
				[Endorsement],
				[Parallel],
				[Mark],
				[TheOpenDate],
				[Maturity],
				[TheJpy],
				[MoveDay],
				[InsertTime],
				[UpdateTime],
				[Id]
			FROM
				[dbo].[AtBillsIncome]
			WHERE
				[BillsId] = #BillsId#
        </select>
		
		<!-- delete -->
        <delete id="delete" parameterClass="string">
			DELETE FROM [dbo].[AtBillsIncome]
			WHERE
				[BillsId] = #BillsId#
        </delete>

		<!-- select all -->
        <select id="select_all" resultMap="AtBillsIncomeResult" >
			SELECT *
			FROM 
				[dbo].[AtBillsIncome]
			
				
			ORDER BY Id ASC
			
			
        </select>
        
		<select id="count_all" resultClass="int">
			select count(*)
			from 
				[dbo].[AtBillsIncome]
		</select>
		
		<select id="select_all_with_paging" resultMap="AtBillsIncomeResult">
            SELECT *
            FROM
            (
                SELECT *, row_number() over(order by $OrderStatement$) rownumber
                FROM    
                    [dbo].[AtBillsIncome]
            ) t
            WHERE t.rownumber between #Row1# and #Row2#
		</select>
		
		<!-- insert -->
        <insert id="insert" parameterClass="AtBillsIncome">
			INSERT INTO [dbo].[AtBillsIncome] 
			(
				[BillsId],
				[IncomeCategory],
				[Checks],
				[BillsOften],
				[BillsCategory],
				[DepartmentId],
				[ProjectId],
				[PassingObject],
				[BankAccount],
				[CollectionAccount],
				[NotesAccount],
				[NotesBank],
				[NotesMoney],
				[StrengtheningMoney],
				[Chinese],
				[Rate],
				[SummonId],
				[OtherSubject],
				[ASummary],
				[Passenger],
				[Up],
				[Endorsement],
				[Parallel],
				[Mark],
				[TheOpenDate],
				[Maturity],
				[TheJpy],
				[MoveDay],
				[InsertTime],
				[UpdateTime],
				[Id]
			) 
			VALUES 
			(
				#BillsId#,
				#IncomeCategory#,
				#Checks#,
				#BillsOften#,
				#BillsCategory#,
				#DepartmentId#,
				#ProjectId#,
				#PassingObject#,
				#BankAccount#,
				#CollectionAccount#,
				#NotesAccount#,
				#NotesBank#,
				#NotesMoney#,
				#StrengtheningMoney#,
				#Chinese#,
				#Rate#,
				#SummonId#,
				#OtherSubject#,
				#ASummary#,
				#Passenger#,
				#Up#,
				#Endorsement#,
				#Parallel#,
				#Mark#,
				#TheOpenDate#,
				#Maturity#,
				#TheJpy#,
				#MoveDay#,
				#InsertTime#,
				#UpdateTime#,
				#Id#
			)
        </insert>
		
		<!-- update -->
        <update id="update" parameterClass="AtBillsIncome">
			UPDATE [AtBillsIncome] SET
				[IncomeCategory] = #IncomeCategory#,
				[Checks] = #Checks#,
				[BillsOften] = #BillsOften#,
				[BillsCategory] = #BillsCategory#,
				[DepartmentId] = #DepartmentId#,
				[ProjectId] = #ProjectId#,
				[PassingObject] = #PassingObject#,
				[BankAccount] = #BankAccount#,
				[CollectionAccount] = #CollectionAccount#,
				[NotesAccount] = #NotesAccount#,
				[NotesBank] = #NotesBank#,
				[NotesMoney] = #NotesMoney#,
				[StrengtheningMoney] = #StrengtheningMoney#,
				[Chinese] = #Chinese#,
				[Rate] = #Rate#,
				[SummonId] = #SummonId#,
				[OtherSubject] = #OtherSubject#,
				[ASummary] = #ASummary#,
				[Passenger] = #Passenger#,
				[Up] = #Up#,
				[Endorsement] = #Endorsement#,
				[Parallel] = #Parallel#,
				[Mark] = #Mark#,
				[TheOpenDate] = #TheOpenDate#,
				[Maturity] = #Maturity#,
				[TheJpy] = #TheJpy#,
				[MoveDay] = #MoveDay#,
				[InsertTime] = #InsertTime#,
				[UpdateTime] = #UpdateTime#,
				[Id] = #Id#
			WHERE
				[BillsId] = #BillsId#
        </update>
		<select id="existsPrimary" resultClass="bool" parameterClass="string">
			<![CDATA[
			select case when exists(
				select *
				from [dbo].[AtBillsIncome]
				where  BillsId = #value# 
				)
				then 1 else 0 end
			]]>
		</select>
		<select id="exists" resultClass="bool" parameterClass="string">
			<![CDATA[
			select case when exists(
				select * 
				from dbo.AtBillsIncome
				where Id = #value#
				) then 1 else 0 end
			]]>
		</select>
		
		<select id="get_by_id" resultMap="AtBillsIncomeResult" parameterClass="string">
			<![CDATA[
			SELECT top 1
				*
			FROM
				[dbo].[AtBillsIncome]
			WHERE
				Id = #value#
			]]>	
        </select>
		
		<select id="existsexcept" resultClass="bool" parameterClass="string">
			<![CDATA[
			select case when exists(
				select *
				from dbo.AtBillsIncome
				where Id = #newId# and Id <> #oldId#
				)
				then 1 else 0 end
			]]>
		</select>		
		
		
    </statements>
</sqlMap>

