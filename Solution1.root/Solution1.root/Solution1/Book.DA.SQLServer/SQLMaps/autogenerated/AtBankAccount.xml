<?xml version="1.0" encoding="utf-8" ?> 
<sqlMap namespace="AtBankAccount" xmlns="http://ibatis.apache.org/mapping" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <alias>
        <typeAlias alias="AtBankAccount" type="Book.Model.AtBankAccount, Book.Model" />
    </alias>
    <resultMaps>                                    
        <resultMap id="AtBankAccountResult" class="AtBankAccount">
			<result property="BankAccountId" column="BankAccountId" />
			<result property="BankAccountName" column="BankAccountName" />
			<result property="BankId" column="BankId" />
			<result property="CheckWord" column="CheckWord" />
			<result property="AccountNumber" column="AccountNumber" />
			<result property="AccountCurrency" column="AccountCurrency" />
			<result property="AccountCategory" column="AccountCategory" />
			<result property="VotesAgainst" column="VotesAgainst" />
			<result property="VotesAgainstAfew" column="VotesAgainstAfew" />
			<result property="DepartmentId" column="DepartmentId" />
			<result property="Contact" column="Contact" />
			<result property="ContactPhone" column="ContactPhone" />
			<result property="Fax" column="Fax" />
			<result property="SecurityBalance" column="SecurityBalance" />
			<result property="TheirBalance" column="TheirBalance" />
			<result property="ExistingBalance" column="ExistingBalance" />
			<result property="DepositSubject" column="DepositSubject" />
			<result property="VoteSubject" column="VoteSubject" />
			<result property="BorrowingSubject" column="BorrowingSubject" />
			<result property="Mark" column="Mark" />
			<result property="InsertTime" column="InsertTime" />
			<result property="UpdateTime" column="UpdateTime" />
			<result property="Id" column="Id" />
		<result property="Bank" column="BankId" lazyLoad="false" select="Bank.select_by_primary_key" />		<result property="Department" column="DepartmentId" lazyLoad="false" select="Department.select_by_primary_key" />
        </resultMap>
    </resultMaps>
		
    <statements>
		<select id="has_rows_of" resultClass="bool">
			select case when exists(
				SELECT
					*
				FROM
					[dbo].[AtBankAccount]
				WHERE
				[BankAccountId] = #BankAccountId#
				) then 1 else 0 end
		</select>
		<select id="has_rows" resultClass="bool">
			select case when exists(
				SELECT
					*
				FROM
					[dbo].[AtBankAccount]
 								
				) then 1 else 0 end
		</select>
		<select id="get_first" resultMap="AtBankAccountResult">
			<![CDATA[
			select top 1 *
			from dbo.AtBankAccount 
			order by InsertTime
			]]>
		</select>
		<select id="get_last" resultMap="AtBankAccountResult">
			<![CDATA[
			select top 1 *
			from dbo.AtBankAccount 			
			order by InsertTime desc
			]]>
		</select>
		<select id="get_prev" resultMap="AtBankAccountResult" parameterClass="AtBankAccount">
			<![CDATA[
			select top 1 *
			from dbo.AtBankAccount
			where InsertTime < #InsertTime#
			order by InsertTime desc
			]]>
		</select>
		<select id="get_next" resultMap="AtBankAccountResult" parameterClass="AtBankAccount">
			<![CDATA[
			select top 1 *
			from dbo.AtBankAccount
			where InsertTime > #InsertTime#
			order by InsertTime
			]]>
		</select>
		<select id="has_rows_before" resultClass="bool" parameterClass="AtBankAccount">
			<![CDATA[
			select case when exists(
				select * 
				from dbo.AtBankAccount
				where InsertTime < #InsertTime#
				) 
				then 1 else 0 end
			]]>
		</select>
		
		<select id="has_rows_after" resultClass="bool" parameterClass="AtBankAccount">
			<![CDATA[
			select case when exists(
				select * 
				from dbo.AtBankAccount
				where InsertTime > #InsertTime#
				) then 1 else 0 end
			]]>
		</select>
		<!-- select by primary key -->
        <select id="select_by_primary_key" resultMap="AtBankAccountResult" parameterClass="AtBankAccount">
			SELECT
				[BankAccountId],
				[BankAccountName],
				[BankId],
				[CheckWord],
				[AccountNumber],
				[AccountCurrency],
				[AccountCategory],
				[VotesAgainst],
				[VotesAgainstAfew],
				[DepartmentId],
				[Contact],
				[ContactPhone],
				[Fax],
				[SecurityBalance],
				[TheirBalance],
				[ExistingBalance],
				[DepositSubject],
				[VoteSubject],
				[BorrowingSubject],
				[Mark],
				[InsertTime],
				[UpdateTime],
				[Id]
			FROM
				[dbo].[AtBankAccount]
			WHERE
				[BankAccountId] = #BankAccountId#
        </select>
		
		<!-- delete -->
        <delete id="delete" parameterClass="string">
			DELETE FROM [dbo].[AtBankAccount]
			WHERE
				[BankAccountId] = #BankAccountId#
        </delete>

		<!-- select all -->
        <select id="select_all" resultMap="AtBankAccountResult" >
			SELECT *
			FROM 
				[dbo].[AtBankAccount]
			
				
			ORDER BY Id ASC
			
			
        </select>
        
		<select id="count_all" resultClass="int">
			select count(*)
			from 
				[dbo].[AtBankAccount]
		</select>
		
		<select id="select_all_with_paging" resultMap="AtBankAccountResult">
            SELECT *
            FROM
            (
                SELECT *, row_number() over(order by $OrderStatement$) rownumber
                FROM    
                    [dbo].[AtBankAccount]
            ) t
            WHERE t.rownumber between #Row1# and #Row2#
		</select>
		
		<!-- insert -->
        <insert id="insert" parameterClass="AtBankAccount">
			INSERT INTO [dbo].[AtBankAccount] 
			(
				[BankAccountId],
				[BankAccountName],
				[BankId],
				[CheckWord],
				[AccountNumber],
				[AccountCurrency],
				[AccountCategory],
				[VotesAgainst],
				[VotesAgainstAfew],
				[DepartmentId],
				[Contact],
				[ContactPhone],
				[Fax],
				[SecurityBalance],
				[TheirBalance],
				[ExistingBalance],
				[DepositSubject],
				[VoteSubject],
				[BorrowingSubject],
				[Mark],
				[InsertTime],
				[UpdateTime],
				[Id]
			) 
			VALUES 
			(
				#BankAccountId#,
				#BankAccountName#,
				#BankId#,
				#CheckWord#,
				#AccountNumber#,
				#AccountCurrency#,
				#AccountCategory#,
				#VotesAgainst#,
				#VotesAgainstAfew#,
				#DepartmentId#,
				#Contact#,
				#ContactPhone#,
				#Fax#,
				#SecurityBalance#,
				#TheirBalance#,
				#ExistingBalance#,
				#DepositSubject#,
				#VoteSubject#,
				#BorrowingSubject#,
				#Mark#,
				#InsertTime#,
				#UpdateTime#,
				#Id#
			)
        </insert>
		
		<!-- update -->
        <update id="update" parameterClass="AtBankAccount">
			UPDATE [AtBankAccount] SET
				[BankAccountName] = #BankAccountName#,
				[BankId] = #BankId#,
				[CheckWord] = #CheckWord#,
				[AccountNumber] = #AccountNumber#,
				[AccountCurrency] = #AccountCurrency#,
				[AccountCategory] = #AccountCategory#,
				[VotesAgainst] = #VotesAgainst#,
				[VotesAgainstAfew] = #VotesAgainstAfew#,
				[DepartmentId] = #DepartmentId#,
				[Contact] = #Contact#,
				[ContactPhone] = #ContactPhone#,
				[Fax] = #Fax#,
				[SecurityBalance] = #SecurityBalance#,
				[TheirBalance] = #TheirBalance#,
				[ExistingBalance] = #ExistingBalance#,
				[DepositSubject] = #DepositSubject#,
				[VoteSubject] = #VoteSubject#,
				[BorrowingSubject] = #BorrowingSubject#,
				[Mark] = #Mark#,
				[InsertTime] = #InsertTime#,
				[UpdateTime] = #UpdateTime#,
				[Id] = #Id#
			WHERE
				[BankAccountId] = #BankAccountId#
        </update>
		<select id="existsPrimary" resultClass="bool" parameterClass="string">
			<![CDATA[
			select case when exists(
				select *
				from [dbo].[AtBankAccount]
				where  BankAccountId = #value# 
				)
				then 1 else 0 end
			]]>
		</select>
		<select id="exists" resultClass="bool" parameterClass="string">
			<![CDATA[
			select case when exists(
				select * 
				from dbo.AtBankAccount
				where Id = #value#
				) then 1 else 0 end
			]]>
		</select>
		
		<select id="get_by_id" resultMap="AtBankAccountResult" parameterClass="string">
			<![CDATA[
			SELECT top 1
				*
			FROM
				[dbo].[AtBankAccount]
			WHERE
				Id = #value#
			]]>	
        </select>
		
		<select id="existsexcept" resultClass="bool" parameterClass="string">
			<![CDATA[
			select case when exists(
				select *
				from dbo.AtBankAccount
				where Id = #newId# and Id <> #oldId#
				)
				then 1 else 0 end
			]]>
		</select>		
		
		
    </statements>
</sqlMap>

