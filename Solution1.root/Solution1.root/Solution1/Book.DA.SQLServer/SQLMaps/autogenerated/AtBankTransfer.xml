<?xml version="1.0" encoding="utf-8" ?> 
<sqlMap namespace="AtBankTransfer" xmlns="http://ibatis.apache.org/mapping" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <alias>
        <typeAlias alias="AtBankTransfer" type="Book.Model.AtBankTransfer, Book.Model" />
    </alias>
    <resultMaps>                                    
        <resultMap id="AtBankTransferResult" class="AtBankTransfer">
			<result property="TransferId" column="TransferId" />
			<result property="TransferDate" column="TransferDate" />
			<result property="WithDepartmentId" column="WithDepartmentId" />
			<result property="WithBankId" column="WithBankId" />
			<result property="WithCurrencyId" column="WithCurrencyId" />
			<result property="WithRate" column="WithRate" />
			<result property="WithMoney" column="WithMoney" />
			<result property="IntoDepartmentId" column="IntoDepartmentId" />
			<result property="IntoBankId" column="IntoBankId" />
			<result property="IntoCurrencyId" column="IntoCurrencyId" />
			<result property="IntoRate" column="IntoRate" />
			<result property="IntoMoney" column="IntoMoney" />
			<result property="SummonId" column="SummonId" />
			<result property="InsertTime" column="InsertTime" />
			<result property="UpdateTime" column="UpdateTime" />
			<result property="Id" column="Id" />
		<result property="WithBank" column="WithBankId" lazyLoad="false" select="AtBankAccount.select_by_primary_key" />		<result property="IntoBank" column="IntoBankId" lazyLoad="false" select="AtBankAccount.select_by_primary_key" />		<result property="Summon" column="SummonId" lazyLoad="false" select="AtSummon.select_by_primary_key" />		<result property="WithCurrency" column="WithCurrencyId" lazyLoad="false" select="CurrencyCategory.select_by_primary_key" />		<result property="IntoCurrency" column="IntoCurrencyId" lazyLoad="false" select="CurrencyCategory.select_by_primary_key" />		<result property="WithDepartment" column="WithDepartmentId" lazyLoad="false" select="Department.select_by_primary_key" />		<result property="IntoDepartment" column="IntoDepartmentId" lazyLoad="false" select="Department.select_by_primary_key" />
        </resultMap>
    </resultMaps>
		
    <statements>
		<select id="has_rows_of" resultClass="bool">
			select case when exists(
				SELECT
					*
				FROM
					[dbo].[AtBankTransfer]
				WHERE
				[TransferId] = #TransferId#
				) then 1 else 0 end
		</select>
		<select id="has_rows" resultClass="bool">
			select case when exists(
				SELECT
					*
				FROM
					[dbo].[AtBankTransfer]
 								
				) then 1 else 0 end
		</select>
		<select id="get_first" resultMap="AtBankTransferResult">
			<![CDATA[
			select top 1 *
			from dbo.AtBankTransfer 
			order by InsertTime
			]]>
		</select>
		<select id="get_last" resultMap="AtBankTransferResult">
			<![CDATA[
			select top 1 *
			from dbo.AtBankTransfer 			
			order by InsertTime desc
			]]>
		</select>
		<select id="get_prev" resultMap="AtBankTransferResult" parameterClass="AtBankTransfer">
			<![CDATA[
			select top 1 *
			from dbo.AtBankTransfer
			where InsertTime < #InsertTime#
			order by InsertTime desc
			]]>
		</select>
		<select id="get_next" resultMap="AtBankTransferResult" parameterClass="AtBankTransfer">
			<![CDATA[
			select top 1 *
			from dbo.AtBankTransfer
			where InsertTime > #InsertTime#
			order by InsertTime
			]]>
		</select>
		<select id="has_rows_before" resultClass="bool" parameterClass="AtBankTransfer">
			<![CDATA[
			select case when exists(
				select * 
				from dbo.AtBankTransfer
				where InsertTime < #InsertTime#
				) 
				then 1 else 0 end
			]]>
		</select>
		
		<select id="has_rows_after" resultClass="bool" parameterClass="AtBankTransfer">
			<![CDATA[
			select case when exists(
				select * 
				from dbo.AtBankTransfer
				where InsertTime > #InsertTime#
				) then 1 else 0 end
			]]>
		</select>
		<!-- select by primary key -->
        <select id="select_by_primary_key" resultMap="AtBankTransferResult" parameterClass="AtBankTransfer">
			SELECT
				[TransferId],
				[TransferDate],
				[WithDepartmentId],
				[WithBankId],
				[WithCurrencyId],
				[WithRate],
				[WithMoney],
				[IntoDepartmentId],
				[IntoBankId],
				[IntoCurrencyId],
				[IntoRate],
				[IntoMoney],
				[SummonId],
				[InsertTime],
				[UpdateTime],
				[Id]
			FROM
				[dbo].[AtBankTransfer]
			WHERE
				[TransferId] = #TransferId#
        </select>
		
		<!-- delete -->
        <delete id="delete" parameterClass="string">
			DELETE FROM [dbo].[AtBankTransfer]
			WHERE
				[TransferId] = #TransferId#
        </delete>

		<!-- select all -->
        <select id="select_all" resultMap="AtBankTransferResult" >
			SELECT *
			FROM 
				[dbo].[AtBankTransfer]
			
				
			ORDER BY Id ASC
			
			
        </select>
        
		<select id="count_all" resultClass="int">
			select count(*)
			from 
				[dbo].[AtBankTransfer]
		</select>
		
		<select id="select_all_with_paging" resultMap="AtBankTransferResult">
            SELECT *
            FROM
            (
                SELECT *, row_number() over(order by $OrderStatement$) rownumber
                FROM    
                    [dbo].[AtBankTransfer]
            ) t
            WHERE t.rownumber between #Row1# and #Row2#
		</select>
		
		<!-- insert -->
        <insert id="insert" parameterClass="AtBankTransfer">
			INSERT INTO [dbo].[AtBankTransfer] 
			(
				[TransferId],
				[TransferDate],
				[WithDepartmentId],
				[WithBankId],
				[WithCurrencyId],
				[WithRate],
				[WithMoney],
				[IntoDepartmentId],
				[IntoBankId],
				[IntoCurrencyId],
				[IntoRate],
				[IntoMoney],
				[SummonId],
				[InsertTime],
				[UpdateTime],
				[Id]
			) 
			VALUES 
			(
				#TransferId#,
				#TransferDate#,
				#WithDepartmentId#,
				#WithBankId#,
				#WithCurrencyId#,
				#WithRate#,
				#WithMoney#,
				#IntoDepartmentId#,
				#IntoBankId#,
				#IntoCurrencyId#,
				#IntoRate#,
				#IntoMoney#,
				#SummonId#,
				#InsertTime#,
				#UpdateTime#,
				#Id#
			)
        </insert>
		
		<!-- update -->
        <update id="update" parameterClass="AtBankTransfer">
			UPDATE [AtBankTransfer] SET
				[TransferDate] = #TransferDate#,
				[WithDepartmentId] = #WithDepartmentId#,
				[WithBankId] = #WithBankId#,
				[WithCurrencyId] = #WithCurrencyId#,
				[WithRate] = #WithRate#,
				[WithMoney] = #WithMoney#,
				[IntoDepartmentId] = #IntoDepartmentId#,
				[IntoBankId] = #IntoBankId#,
				[IntoCurrencyId] = #IntoCurrencyId#,
				[IntoRate] = #IntoRate#,
				[IntoMoney] = #IntoMoney#,
				[SummonId] = #SummonId#,
				[InsertTime] = #InsertTime#,
				[UpdateTime] = #UpdateTime#,
				[Id] = #Id#
			WHERE
				[TransferId] = #TransferId#
        </update>
		<select id="existsPrimary" resultClass="bool" parameterClass="string">
			<![CDATA[
			select case when exists(
				select *
				from [dbo].[AtBankTransfer]
				where  TransferId = #value# 
				)
				then 1 else 0 end
			]]>
		</select>
		<select id="exists" resultClass="bool" parameterClass="string">
			<![CDATA[
			select case when exists(
				select * 
				from dbo.AtBankTransfer
				where Id = #value#
				) then 1 else 0 end
			]]>
		</select>
		
		<select id="get_by_id" resultMap="AtBankTransferResult" parameterClass="string">
			<![CDATA[
			SELECT top 1
				*
			FROM
				[dbo].[AtBankTransfer]
			WHERE
				Id = #value#
			]]>	
        </select>
		
		<select id="existsexcept" resultClass="bool" parameterClass="string">
			<![CDATA[
			select case when exists(
				select *
				from dbo.AtBankTransfer
				where Id = #newId# and Id <> #oldId#
				)
				then 1 else 0 end
			]]>
		</select>		
		
		
    </statements>
</sqlMap>

