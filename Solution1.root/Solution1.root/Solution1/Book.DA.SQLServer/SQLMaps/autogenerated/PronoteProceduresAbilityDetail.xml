<?xml version="1.0" encoding="utf-8" ?> 
<sqlMap namespace="PronoteProceduresAbilityDetail" xmlns="http://ibatis.apache.org/mapping" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <alias>
        <typeAlias alias="PronoteProceduresAbilityDetail" type="Book.Model.PronoteProceduresAbilityDetail, Book.Model" />
    </alias>
    <resultMaps>                                    
        <resultMap id="PronoteProceduresAbilityDetailResult" class="PronoteProceduresAbilityDetail">
			<result property="PronoteProceduresAbilityDetailId" column="PronoteProceduresAbilityDetailId" />
			<result property="MouldId" column="MouldId" />
			<result property="PronoteProceduresAbilityId" column="PronoteProceduresAbilityId" />
			<result property="ProductId" column="ProductId" />
			<result property="ProductUnit" column="ProductUnit" />
			<result property="UnitOutput" column="UnitOutput" />
			<result property="TimeConsuming" column="TimeConsuming" />
		<result property="Product" column="ProductId" lazyLoad="false" select="Product.select_by_primary_key" />		<result property="PronoteProceduresAbility" column="PronoteProceduresAbilityId" lazyLoad="false" select="PronoteProceduresAbility.select_by_primary_key" />		<result property="Mould" column="MouldId" lazyLoad="false" select="ProductMould.select_by_primary_key" />
        </resultMap>
    </resultMaps>
		
    <statements>
		<select id="has_rows_of" resultClass="bool">
			select case when exists(
				SELECT
					*
				FROM
					[dbo].[PronoteProceduresAbilityDetail]
				WHERE
				[PronoteProceduresAbilityDetailId] = #PronoteProceduresAbilityDetailId#
				) then 1 else 0 end
		</select>
		<select id="has_rows" resultClass="bool">
			select case when exists(
				SELECT
					*
				FROM
					[dbo].[PronoteProceduresAbilityDetail]
 								
				) then 1 else 0 end
		</select>
		<!-- select by primary key -->
        <select id="select_by_primary_key" resultMap="PronoteProceduresAbilityDetailResult" parameterClass="PronoteProceduresAbilityDetail">
			SELECT
				[PronoteProceduresAbilityDetailId],
				[MouldId],
				[PronoteProceduresAbilityId],
				[ProductId],
				[ProductUnit],
				[UnitOutput],
				[TimeConsuming]
			FROM
				[dbo].[PronoteProceduresAbilityDetail]
			WHERE
				[PronoteProceduresAbilityDetailId] = #PronoteProceduresAbilityDetailId#
        </select>
		
		<!-- delete -->
        <delete id="delete" parameterClass="string">
			DELETE FROM [dbo].[PronoteProceduresAbilityDetail]
			WHERE
				[PronoteProceduresAbilityDetailId] = #PronoteProceduresAbilityDetailId#
        </delete>

		<!-- select all -->
        <select id="select_all" resultMap="PronoteProceduresAbilityDetailResult" >
			SELECT *
			FROM 
				[dbo].[PronoteProceduresAbilityDetail]
			
			
        </select>
        
		<select id="count_all" resultClass="int">
			select count(*)
			from 
				[dbo].[PronoteProceduresAbilityDetail]
		</select>
		
		<select id="select_all_with_paging" resultMap="PronoteProceduresAbilityDetailResult">
            SELECT *
            FROM
            (
                SELECT *, row_number() over(order by $OrderStatement$) rownumber
                FROM    
                    [dbo].[PronoteProceduresAbilityDetail]
            ) t
            WHERE t.rownumber between #Row1# and #Row2#
		</select>
		
		<!-- insert -->
        <insert id="insert" parameterClass="PronoteProceduresAbilityDetail">
			INSERT INTO [dbo].[PronoteProceduresAbilityDetail] 
			(
				[PronoteProceduresAbilityDetailId],
				[MouldId],
				[PronoteProceduresAbilityId],
				[ProductId],
				[ProductUnit],
				[UnitOutput],
				[TimeConsuming]
			) 
			VALUES 
			(
				#PronoteProceduresAbilityDetailId#,
				#MouldId#,
				#PronoteProceduresAbilityId#,
				#ProductId#,
				#ProductUnit#,
				#UnitOutput#,
				#TimeConsuming#
			)
        </insert>
		
		<!-- update -->
        <update id="update" parameterClass="PronoteProceduresAbilityDetail">
			UPDATE [PronoteProceduresAbilityDetail] SET
				[MouldId] = #MouldId#,
				[PronoteProceduresAbilityId] = #PronoteProceduresAbilityId#,
				[ProductId] = #ProductId#,
				[ProductUnit] = #ProductUnit#,
				[UnitOutput] = #UnitOutput#,
				[TimeConsuming] = #TimeConsuming#
			WHERE
				[PronoteProceduresAbilityDetailId] = #PronoteProceduresAbilityDetailId#
        </update>
		<select id="existsPrimary" resultClass="bool" parameterClass="string">
			<![CDATA[
			select case when exists(
				select *
				from [dbo].[PronoteProceduresAbilityDetail]
				where  PronoteProceduresAbilityDetailId = #value# 
				)
				then 1 else 0 end
			]]>
		</select>
		
    </statements>
</sqlMap>

