<?xml version="1.0" encoding="utf-8" ?> 
<sqlMap namespace="ProduceTransferDetail" xmlns="http://ibatis.apache.org/mapping" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <alias>
        <typeAlias alias="ProduceTransferDetail" type="Book.Model.ProduceTransferDetail, Book.Model" />
    </alias>
    <resultMaps>                                    
        <resultMap id="ProduceTransferDetailResult" class="ProduceTransferDetail">
			<result property="ProduceTransferDetailId" column="ProduceTransferDetailId" />
			<result property="ProduceTransferId" column="ProduceTransferId" />
			<result property="ProceduresOutId" column="ProceduresOutId" />
			<result property="ProceduresInId" column="ProceduresInId" />
			<result property="ProductId" column="ProductId" />
			<result property="description" column="description" />
			<result property="PronoteHeaderId" column="PronoteHeaderId" />
			<result property="TransferQuantity" column="TransferQuantity" />
			<result property="ScrapQuantity" column="ScrapQuantity" />
			<result property="ProductUnit" column="ProductUnit" />
			<result property="ProceOutId" column="ProceOutId" />
			<result property="ProceInId" column="ProceInId" />
			<result property="ProceduresMoQuantity" column="ProceduresMoQuantity" />
			<result property="WorkHouseInId" column="WorkHouseInId" />
			<result property="ProceduresQuantity" column="ProceduresQuantity" />
			<result property="CustomerInvoiceXOId" column="CustomerInvoiceXOId" />
		<result property="Product" column="ProductId" lazyLoad="false" select="Product.select_by_primary_key" />		<result property="ProceduresIn" column="ProceduresInId" lazyLoad="false" select="Procedures.select_by_primary_key" />		<result property="ProceduresOut" column="ProceduresOutId" lazyLoad="false" select="Procedures.select_by_primary_key" />		<result property="ProduceTransfer" column="ProduceTransferId" lazyLoad="false" select="ProduceTransfer.select_by_primary_key" />		<result property="WorkHouseIn" column="WorkHouseInId" lazyLoad="false" select="WorkHouse.select_by_primary_key" />
        </resultMap>
    </resultMaps>
		
    <statements>
		<select id="has_rows_of" resultClass="bool">
			select case when exists(
				SELECT
					*
				FROM
					[dbo].[ProduceTransferDetail]
				WHERE
				[ProduceTransferDetailId] = #ProduceTransferDetailId#
				) then 1 else 0 end
		</select>
		<select id="has_rows" resultClass="bool">
			select case when exists(
				SELECT
					*
				FROM
					[dbo].[ProduceTransferDetail]
 								
				) then 1 else 0 end
		</select>
		<!-- select by primary key -->
        <select id="select_by_primary_key" resultMap="ProduceTransferDetailResult" parameterClass="ProduceTransferDetail">
			SELECT
				[ProduceTransferDetailId],
				[ProduceTransferId],
				[ProceduresOutId],
				[ProceduresInId],
				[ProductId],
				[description],
				[PronoteHeaderId],
				[TransferQuantity],
				[ScrapQuantity],
				[ProductUnit],
				[ProceOutId],
				[ProceInId],
				[ProceduresMoQuantity],
				[WorkHouseInId],
				[ProceduresQuantity],
				[CustomerInvoiceXOId]
			FROM
				[dbo].[ProduceTransferDetail]
			WHERE
				[ProduceTransferDetailId] = #ProduceTransferDetailId#
        </select>
		
		<!-- delete -->
        <delete id="delete" parameterClass="string">
			DELETE FROM [dbo].[ProduceTransferDetail]
			WHERE
				[ProduceTransferDetailId] = #ProduceTransferDetailId#
        </delete>

		<!-- select all -->
        <select id="select_all" resultMap="ProduceTransferDetailResult" >
			SELECT *
			FROM 
				[dbo].[ProduceTransferDetail]
			

			
        </select>
        
		<select id="count_all" resultClass="int">
			select count(*)
			from 
				[dbo].[ProduceTransferDetail]
		</select>
		
		<select id="select_all_with_paging" resultMap="ProduceTransferDetailResult">
            SELECT *
            FROM
            (
                SELECT *, row_number() over(order by $OrderStatement$) rownumber
                FROM    
                    [dbo].[ProduceTransferDetail]
            ) t
            WHERE t.rownumber between #Row1# and #Row2#
		</select>
		
		<!-- insert -->
        <insert id="insert" parameterClass="ProduceTransferDetail">
			INSERT INTO [dbo].[ProduceTransferDetail] 
			(
				[ProduceTransferDetailId],
				[ProduceTransferId],
				[ProceduresOutId],
				[ProceduresInId],
				[ProductId],
				[description],
				[PronoteHeaderId],
				[TransferQuantity],
				[ScrapQuantity],
				[ProductUnit],
				[ProceOutId],
				[ProceInId],
				[ProceduresMoQuantity],
				[WorkHouseInId],
				[ProceduresQuantity],
				[CustomerInvoiceXOId]
			) 
			VALUES 
			(
				#ProduceTransferDetailId#,
				#ProduceTransferId#,
				#ProceduresOutId#,
				#ProceduresInId#,
				#ProductId#,
				#description#,
				#PronoteHeaderId#,
				#TransferQuantity#,
				#ScrapQuantity#,
				#ProductUnit#,
				#ProceOutId#,
				#ProceInId#,
				#ProceduresMoQuantity#,
				#WorkHouseInId#,
				#ProceduresQuantity#,
				#CustomerInvoiceXOId#
			)
        </insert>
		
		<!-- update -->
        <update id="update" parameterClass="ProduceTransferDetail">
			UPDATE [ProduceTransferDetail] SET
				[ProduceTransferId] = #ProduceTransferId#,
				[ProceduresOutId] = #ProceduresOutId#,
				[ProceduresInId] = #ProceduresInId#,
				[ProductId] = #ProductId#,
				[description] = #description#,
				[PronoteHeaderId] = #PronoteHeaderId#,
				[TransferQuantity] = #TransferQuantity#,
				[ScrapQuantity] = #ScrapQuantity#,
				[ProductUnit] = #ProductUnit#,
				[ProceOutId] = #ProceOutId#,
				[ProceInId] = #ProceInId#,
				[ProceduresMoQuantity] = #ProceduresMoQuantity#,
				[WorkHouseInId] = #WorkHouseInId#,
				[ProceduresQuantity] = #ProceduresQuantity#,
				[CustomerInvoiceXOId] = #CustomerInvoiceXOId#
			WHERE
				[ProduceTransferDetailId] = #ProduceTransferDetailId#
        </update>
		<select id="existsPrimary" resultClass="bool" parameterClass="string">
			<![CDATA[
			select case when exists(
				select *
				from [dbo].[ProduceTransferDetail]
				where  ProduceTransferDetailId = #value# 
				)
				then 1 else 0 end
			]]>
		</select>
		
    </statements>
</sqlMap>

