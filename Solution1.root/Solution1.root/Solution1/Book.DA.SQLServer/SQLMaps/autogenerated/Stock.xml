<?xml version="1.0" encoding="utf-8" ?> 
<sqlMap namespace="Stock" xmlns="http://ibatis.apache.org/mapping" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <alias>
        <typeAlias alias="Stock" type="Book.Model.Stock, Book.Model" />
    </alias>
    <resultMaps>                                    
        <resultMap id="StockResult" class="Stock">
			<result property="StockId" column="StockId" />
			<result property="ProductId" column="ProductId" />
			<result property="DepotPositionId" column="DepotPositionId" />
			<result property="StockQuantity0" column="StockQuantity0" />
			<result property="StockQuantity1" column="StockQuantity1" />
			<result property="StockQuantityD" column="StockQuantityD" />
			<result property="StockQuantityU" column="StockQuantityU" />
			<result property="StockBeginJR" column="StockBeginJR" />
			<result property="StockBeginJC" column="StockBeginJC" />
			<result property="StockCurrentJR" column="StockCurrentJR" />
			<result property="StockCurrentJC" column="StockCurrentJC" />
			<result property="DepotId" column="DepotId" />
			<result property="StockCheckDate" column="StockCheckDate" />
			<result property="StockQuantityOld" column="StockQuantityOld" />
			<result property="ProduceUnit" column="ProduceUnit" />
			<result property="IsNotUpdate" column="IsNotUpdate" />
			<result property="Descriptions" column="Descriptions" />
		<result property="Depot" column="DepotId" lazyLoad="false" select="Depot.select_by_primary_key" />		<result property="DepotPosition" column="DepotPositionId" lazyLoad="false" select="DepotPosition.select_by_primary_key" />		<result property="Product" column="ProductId" lazyLoad="false" select="Product.select_by_primary_key" />
        </resultMap>
    </resultMaps>
		
    <statements>
		<select id="has_rows_of" resultClass="bool">
			select case when exists(
				SELECT
					*
				FROM
					[dbo].[Stock]
				WHERE
				[StockId] = #StockId#
				) then 1 else 0 end
		</select>
		<select id="has_rows" resultClass="bool">
			select case when exists(
				SELECT
					*
				FROM
					[dbo].[Stock]
 								
				) then 1 else 0 end
		</select>
		<!-- select by primary key -->
        <select id="select_by_primary_key" resultMap="StockResult" parameterClass="Stock">
			SELECT
				[StockId],
				[ProductId],
				[DepotPositionId],
				[StockQuantity0],
				[StockQuantity1],
				[StockQuantityD],
				[StockQuantityU],
				[StockBeginJR],
				[StockBeginJC],
				[StockCurrentJR],
				[StockCurrentJC],
				[DepotId],
				[StockCheckDate],
				[StockQuantityOld],
				[ProduceUnit],
				[IsNotUpdate],
				[Descriptions]
			FROM
				[dbo].[Stock]
			WHERE
				[StockId] = #StockId#
        </select>
		
		<!-- delete -->
        <delete id="delete" parameterClass="string">
			DELETE FROM [dbo].[Stock]
			WHERE
				[StockId] = #StockId#
        </delete>

		<!-- select all -->
        <select id="select_all" resultMap="StockResult" >
			SELECT *
			FROM 
				[dbo].[Stock]
			

			
        </select>
        
		<select id="count_all" resultClass="int">
			select count(*)
			from 
				[dbo].[Stock]
		</select>
		
		<select id="select_all_with_paging" resultMap="StockResult">
            SELECT *
            FROM
            (
                SELECT *, row_number() over(order by $OrderStatement$) rownumber
                FROM    
                    [dbo].[Stock]
            ) t
            WHERE t.rownumber between #Row1# and #Row2#
		</select>
		
		<!-- insert -->
        <insert id="insert" parameterClass="Stock">
			INSERT INTO [dbo].[Stock] 
			(
				[StockId],
				[ProductId],
				[DepotPositionId],
				[StockQuantity0],
				[StockQuantity1],
				[StockQuantityD],
				[StockQuantityU],
				[StockBeginJR],
				[StockBeginJC],
				[StockCurrentJR],
				[StockCurrentJC],
				[DepotId],
				[StockCheckDate],
				[StockQuantityOld],
				[ProduceUnit],
				[IsNotUpdate],
				[Descriptions]
			) 
			VALUES 
			(
				#StockId#,
				#ProductId#,
				#DepotPositionId#,
				#StockQuantity0#,
				#StockQuantity1#,
				#StockQuantityD#,
				#StockQuantityU#,
				#StockBeginJR#,
				#StockBeginJC#,
				#StockCurrentJR#,
				#StockCurrentJC#,
				#DepotId#,
				#StockCheckDate#,
				#StockQuantityOld#,
				#ProduceUnit#,
				#IsNotUpdate#,
				#Descriptions#
			)
        </insert>
		
		<!-- update -->
        <update id="update" parameterClass="Stock">
			UPDATE [Stock] SET
				[ProductId] = #ProductId#,
				[DepotPositionId] = #DepotPositionId#,
				[StockQuantity0] = #StockQuantity0#,
				[StockQuantity1] = #StockQuantity1#,
				[StockQuantityD] = #StockQuantityD#,
				[StockQuantityU] = #StockQuantityU#,
				[StockBeginJR] = #StockBeginJR#,
				[StockBeginJC] = #StockBeginJC#,
				[StockCurrentJR] = #StockCurrentJR#,
				[StockCurrentJC] = #StockCurrentJC#,
				[DepotId] = #DepotId#,
				[StockCheckDate] = #StockCheckDate#,
				[StockQuantityOld] = #StockQuantityOld#,
				[ProduceUnit] = #ProduceUnit#,
				[IsNotUpdate] = #IsNotUpdate#,
				[Descriptions] = #Descriptions#
			WHERE
				[StockId] = #StockId#
        </update>
		<select id="existsPrimary" resultClass="bool" parameterClass="string">
			<![CDATA[
			select case when exists(
				select *
				from [dbo].[Stock]
				where  StockId = #value# 
				)
				then 1 else 0 end
			]]>
		</select>
		
    </statements>
</sqlMap>

