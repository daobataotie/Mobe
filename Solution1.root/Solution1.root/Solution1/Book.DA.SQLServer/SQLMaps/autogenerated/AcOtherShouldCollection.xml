<?xml version="1.0" encoding="utf-8" ?> 
<sqlMap namespace="AcOtherShouldCollection" xmlns="http://ibatis.apache.org/mapping" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <alias>
        <typeAlias alias="AcOtherShouldCollection" type="Book.Model.AcOtherShouldCollection, Book.Model" />
    </alias>
    <resultMaps>                                    
        <resultMap id="AcOtherShouldCollectionResult" class="AcOtherShouldCollection">
			<result property="AcOtherShouldCollectionId" column="AcOtherShouldCollectionId" />
			<result property="EmployeeId" column="EmployeeId" />
			<result property="Employee0Id" column="Employee0Id" />
			<result property="CustomerId" column="CustomerId" />
			<result property="AtCurrencyCategoryId" column="AtCurrencyCategoryId" />
			<result property="Employee1Id" column="Employee1Id" />
			<result property="AcOtherShouldCollectionDate" column="AcOtherShouldCollectionDate" />
			<result property="ObjectName" column="ObjectName" />
			<result property="ExchangeRate" column="ExchangeRate" />
			<result property="InvoiceId" column="InvoiceId" />
			<result property="HeJi" column="HeJi" />
			<result property="AcInvoiceState" column="AcInvoiceState" />
			<result property="AuditingState" column="AuditingState" />
			<result property="AdvancePayableDate" column="AdvancePayableDate" />
			<result property="AcDesc" column="AcDesc" />
			<result property="InsertTime" column="InsertTime" />
			<result property="UpdateTime" column="UpdateTime" />
		<result property="Employee0" column="Employee0Id" lazyLoad="false" select="Employee.select_by_primary_key" />		<result property="Employee" column="EmployeeId" lazyLoad="false" select="Employee.select_by_primary_key" />		<result property="Employee1" column="Employee1Id" lazyLoad="false" select="Employee.select_by_primary_key" />		<result property="Customer" column="CustomerId" lazyLoad="false" select="Customer.select_by_primary_key" />		<result property="AtCurrencyCategory" column="AtCurrencyCategoryId" lazyLoad="false" select="AtCurrencyCategory.select_by_primary_key" />
        </resultMap>
    </resultMaps>
		
    <statements>
		<select id="has_rows_of" resultClass="bool">
			select case when exists(
				SELECT
					*
				FROM
					[dbo].[AcOtherShouldCollection]
				WHERE
				[AcOtherShouldCollectionId] = #AcOtherShouldCollectionId#
				) then 1 else 0 end
		</select>
		<select id="has_rows" resultClass="bool">
			select case when exists(
				SELECT
					*
				FROM
					[dbo].[AcOtherShouldCollection]		
				) then 1 else 0 end
		</select>
		<select id="get_first" resultMap="AcOtherShouldCollectionResult">
			<![CDATA[
			select top 1 *
			from dbo.AcOtherShouldCollection 
			order by InsertTime
			]]>
		</select>
		<select id="get_last" resultMap="AcOtherShouldCollectionResult">
			<![CDATA[
			select top 1 *
			from dbo.AcOtherShouldCollection 			
			order by InsertTime desc
			]]>
		</select>
		<select id="get_prev" resultMap="AcOtherShouldCollectionResult" parameterClass="AcOtherShouldCollection">
			<![CDATA[
			select top 1 *
			from dbo.AcOtherShouldCollection
			where InsertTime < #InsertTime#
			order by InsertTime desc
			]]>
		</select>
		<select id="get_next" resultMap="AcOtherShouldCollectionResult" parameterClass="AcOtherShouldCollection">
			<![CDATA[
			select top 1 *
			from dbo.AcOtherShouldCollection
			where InsertTime > #InsertTime#
			order by InsertTime
			]]>
		</select>
		<select id="has_rows_before" resultClass="bool" parameterClass="AcOtherShouldCollection">
			<![CDATA[
			select case when exists(
				select * 
				from dbo.AcOtherShouldCollection
				where InsertTime < #InsertTime#
				) 
				then 1 else 0 end
			]]>
		</select>
		
		<select id="has_rows_after" resultClass="bool" parameterClass="AcOtherShouldCollection">
			<![CDATA[
			select case when exists(
				select * 
				from dbo.AcOtherShouldCollection
				where InsertTime > #InsertTime#
				) then 1 else 0 end
			]]>
		</select>
		<!-- select by primary key -->
        <select id="select_by_primary_key" resultMap="AcOtherShouldCollectionResult" parameterClass="AcOtherShouldCollection">
			SELECT
				[AcOtherShouldCollectionId],
				[EmployeeId],
				[Employee0Id],
				[CustomerId],
				[AtCurrencyCategoryId],
				[Employee1Id],
				[AcOtherShouldCollectionDate],
				[ObjectName],
				[ExchangeRate],
				[InvoiceId],
				[HeJi],
				[AcInvoiceState],
				[AuditingState],
				[AdvancePayableDate],
				[AcDesc],
				[InsertTime],
				[UpdateTime]
			FROM
				[dbo].[AcOtherShouldCollection]
			WHERE
				[AcOtherShouldCollectionId] = #AcOtherShouldCollectionId#
        </select>
		
		<!-- delete -->
        <delete id="delete" parameterClass="string">
			DELETE FROM [dbo].[AcOtherShouldCollection]
			WHERE
				[AcOtherShouldCollectionId] = #AcOtherShouldCollectionId#
        </delete>

		<!-- select all -->
        <select id="select_all" resultMap="AcOtherShouldCollectionResult" >
			SELECT *
			FROM 
				[dbo].[AcOtherShouldCollection]
			
  ORDER BY InsertTime DESC  
			
        </select>
        
		<select id="count_all" resultClass="int">
			select count(*)
			from 
				[dbo].[AcOtherShouldCollection]
		</select>
		
		<select id="select_all_with_paging" resultMap="AcOtherShouldCollectionResult">
            SELECT *
            FROM
            (
                SELECT *, row_number() over(order by $OrderStatement$) rownumber
                FROM    
                    [dbo].[AcOtherShouldCollection]
            ) t
            WHERE t.rownumber between #Row1# and #Row2#
		</select>
		
		<!-- insert -->
        <insert id="insert" parameterClass="AcOtherShouldCollection">
			INSERT INTO [dbo].[AcOtherShouldCollection] 
			(
				[AcOtherShouldCollectionId],
				[EmployeeId],
				[Employee0Id],
				[CustomerId],
				[AtCurrencyCategoryId],
				[Employee1Id],
				[AcOtherShouldCollectionDate],
				[ObjectName],
				[ExchangeRate],
				[InvoiceId],
				[HeJi],
				[AcInvoiceState],
				[AuditingState],
				[AdvancePayableDate],
				[AcDesc],
				[InsertTime],
				[UpdateTime]
			) 
			VALUES 
			(
				#AcOtherShouldCollectionId#,
				#EmployeeId#,
				#Employee0Id#,
				#CustomerId#,
				#AtCurrencyCategoryId#,
				#Employee1Id#,
				#AcOtherShouldCollectionDate#,
				#ObjectName#,
				#ExchangeRate#,
				#InvoiceId#,
				#HeJi#,
				#AcInvoiceState#,
				#AuditingState#,
				#AdvancePayableDate#,
				#AcDesc#,
				#InsertTime#,
				#UpdateTime#
			)
        </insert>
		
		<!-- update -->
        <update id="update" parameterClass="AcOtherShouldCollection">
			UPDATE [AcOtherShouldCollection] SET
				[EmployeeId] = #EmployeeId#,
				[Employee0Id] = #Employee0Id#,
				[CustomerId] = #CustomerId#,
				[AtCurrencyCategoryId] = #AtCurrencyCategoryId#,
				[Employee1Id] = #Employee1Id#,
				[AcOtherShouldCollectionDate] = #AcOtherShouldCollectionDate#,
				[ObjectName] = #ObjectName#,
				[ExchangeRate] = #ExchangeRate#,
				[InvoiceId] = #InvoiceId#,
				[HeJi] = #HeJi#,
				[AcInvoiceState] = #AcInvoiceState#,
				[AuditingState] = #AuditingState#,
				[AdvancePayableDate] = #AdvancePayableDate#,
				[AcDesc] = #AcDesc#,
				[InsertTime] = #InsertTime#,
				[UpdateTime] = #UpdateTime#
			WHERE
				[AcOtherShouldCollectionId] = #AcOtherShouldCollectionId#
        </update>
		<select id="existsPrimary" resultClass="bool" parameterClass="string">
			<![CDATA[
			select case when exists(
				select *
				from [dbo].[AcOtherShouldCollection]
				where  AcOtherShouldCollectionId = #value# 
				)
				then 1 else 0 end
			]]>
		</select>
		
    </statements>
</sqlMap>

