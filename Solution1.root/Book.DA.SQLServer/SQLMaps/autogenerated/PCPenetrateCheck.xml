<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="PCPenetrateCheck" xmlns="http://ibatis.apache.org/mapping"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <alias>
    <typeAlias alias="PCPenetrateCheck" type="Book.Model.PCPenetrateCheck, Book.Model" />
  </alias>
  <resultMaps>
    <resultMap id="PCPenetrateCheckResult" class="PCPenetrateCheck">
      <result property="PCPenetrateCheckId" column="PCPenetrateCheckId" />
      <result property="ProductId" column="ProductId" />
      <result property="EmployeeId" column="EmployeeId" />
      <result property="InsertTime" column="InsertTime" />
      <result property="UpdateTime" column="UpdateTime" />
      <result property="PCPenetrateCheckDate" column="PCPenetrateCheckDate" />
      <result property="PCPenetrateCheckQuantity" column="PCPenetrateCheckQuantity" />
      <result property="InvoiceCusXOId" column="InvoiceCusXOId" />
      <result property="PronoteHeaderId" column="PronoteHeaderId" />
      <result property="mCheckStandard" column="mCheckStandard" />
      <result property="InvoiceXOQuantity" column="InvoiceXOQuantity" />
      <result property="PCPenetrateCheckDesc" column="PCPenetrateCheckDesc" />
      <result property="PCPenetrateCheckLeftCount" column="PCPenetrateCheckLeftCount" />
      <result property="PCPenetrateCheckRightCount" column="PCPenetrateCheckRightCount" />
      <result property="PCPenetrateCheckCenterCount" column="PCPenetrateCheckCenterCount" />
      <result property="IsPassing" column="IsPassing" />
      <result property="AuditState" column="AuditState" />
      <result property="AuditEmpId" column="AuditEmpId" />
      <result property="ProductUnitId" column="ProductUnitId"/>
      <result property="Employee" column="EmployeeId" lazyLoad="false" select="Employee.select_SimpleEmployee" />
      <result property="Product" column="ProductId" lazyLoad="false" select="Product.select_SimpleProduct" />
      <result property="AuditEmp" column="AuditEmpId" lazyLoad="false" select="Employee.select_SimpleEmployee" />
      <result property="ProductUnit" column="ProductUnitId" lazyLoad="false" select="ProductUnit.select_by_primary_key"/>
    </resultMap>
  </resultMaps>

  <statements>
    <select id="has_rows_of" resultClass="bool">
      <![CDATA[select case when exists(
				SELECT
					*
				FROM
					[dbo].[PCPenetrateCheck]
				WHERE
				[PCPenetrateCheckId] = #PCPenetrateCheckId#
                        			                   
				) then 1 else 0 end
                ]]>
    </select>
    <select id="has_rows" resultClass="bool">
      <![CDATA[select case when exists(
				SELECT
					*
				FROM
					[dbo].[PCPenetrateCheck]
 								
				) then 1 else 0 end
                ]]>
    </select>
    <select id="get_first" resultMap="PCPenetrateCheckResult">
      <![CDATA[
			select top 1 *
			from dbo.PCPenetrateCheck
			 
			order by InsertTime 
			]]>
    </select>
    <select id="get_last" resultMap="PCPenetrateCheckResult">
      <![CDATA[
			select top 1 *
			from dbo.PCPenetrateCheck
						
            order by InsertTime desc
			]]>

    </select>
    <select id="get_prev" resultMap="PCPenetrateCheckResult" parameterClass="PCPenetrateCheck">
      <![CDATA[
			select top 1 *
			from dbo.PCPenetrateCheck
			where InsertTime < #InsertTime#	
            			          
            order by InsertTime desc
			]]>
    </select>
    <select id="get_next" resultMap="PCPenetrateCheckResult" parameterClass="PCPenetrateCheck">
      <![CDATA[
			select top 1 *
			from dbo.PCPenetrateCheck
			where InsertTime > #InsertTime#	
                			                   
            order by InsertTime
			]]>
    </select>

    <select id="has_rows_before" resultClass="bool" parameterClass="PCPenetrateCheck">
      <![CDATA[
			select case when exists(
				select * 
				from dbo.PCPenetrateCheck
				where InsertTime < #InsertTime#
                			                   
				) then 1 else 0 end
			]]>
    </select>

    <select id="has_rows_after" resultClass="bool" parameterClass="PCPenetrateCheck">
      <![CDATA[
			select case when exists(
				select * 
				from dbo.PCPenetrateCheck
				where InsertTime > #InsertTime#
                			          
         
				) then 1 else 0 end
			]]>
    </select>
    <!-- select by primary key -->
    <select id="select_by_primary_key" resultMap="PCPenetrateCheckResult" parameterClass="PCPenetrateCheck">
      <![CDATA[SELECT
				[PCPenetrateCheckId],
				[ProductId],
				[EmployeeId],
				[InsertTime],
				[UpdateTime],
				[PCPenetrateCheckDate],
				[PCPenetrateCheckQuantity],
				[InvoiceCusXOId],
				[PronoteHeaderId],
				[mCheckStandard],
				[InvoiceXOQuantity],
				[PCPenetrateCheckDesc],
				[PCPenetrateCheckLeftCount],
				[PCPenetrateCheckRightCount],
				[PCPenetrateCheckCenterCount],
				[IsPassing],
        [AuditState],
        [AuditEmpId],
        [ProductUnitId]
			FROM
				[dbo].[PCPenetrateCheck]
			WHERE
				[PCPenetrateCheckId] = #PCPenetrateCheckId#
                			          
         		]]>
    </select>

    <!-- delete -->
    <delete id="delete" parameterClass="string">
      <![CDATA[                
                DELETE FROM [dbo].[PCPenetrateCheck]
			WHERE            
				[PCPenetrateCheckId] = #PCPenetrateCheckId#
                    		]]>
    </delete>

    <!-- select all -->
    <select id="select_all" resultMap="PCPenetrateCheckResult" >
      <![CDATA[SELECT *
			FROM 
				[dbo].[PCPenetrateCheck]
                			                   
  ORDER BY InsertTime DESC  
			]]>
    </select>

    <select id="count_all" resultClass="int">
      <![CDATA[	select count(*)
			from 
				[dbo].[PCPenetrateCheck]
                			          
         ]]>
    </select>

    <select id="select_all_with_paging" resultMap="PCPenetrateCheckResult">
      <![CDATA[    SELECT *
            FROM
            (
                SELECT *, row_number() over(order by $OrderStatement$) rownumber
                FROM    
                    [dbo].[PCPenetrateCheck]
                    			          
         
            ) t
            WHERE t.rownumber between #Row1# and #Row2#
             ]]>
    </select>

    <!-- insert -->
    <insert id="insert" parameterClass="PCPenetrateCheck">
      <![CDATA[ INSERT INTO [dbo].[PCPenetrateCheck] 
			(
				[PCPenetrateCheckId],
				[ProductId],
				[EmployeeId],
				[InsertTime],
				[UpdateTime],
				[PCPenetrateCheckDate],
				[PCPenetrateCheckQuantity],
				[InvoiceCusXOId],
				[PronoteHeaderId],
				[mCheckStandard],
				[InvoiceXOQuantity],
				[PCPenetrateCheckDesc],
				[PCPenetrateCheckLeftCount],
				[PCPenetrateCheckRightCount],
				[PCPenetrateCheckCenterCount],
				[IsPassing],
        [AuditState],
        [AuditEmpId],
        [ProductUnitId]
			) 
			VALUES 
			(
				#PCPenetrateCheckId#,
				#ProductId#,
				#EmployeeId#,
				#InsertTime#,
				#UpdateTime#,
				#PCPenetrateCheckDate#,
				#PCPenetrateCheckQuantity#,
				#InvoiceCusXOId#,
				#PronoteHeaderId#,
				#mCheckStandard#,
				#InvoiceXOQuantity#,
				#PCPenetrateCheckDesc#,
				#PCPenetrateCheckLeftCount#,
				#PCPenetrateCheckRightCount#,
				#PCPenetrateCheckCenterCount#,
				#IsPassing#,
        #AuditState#,
        #AuditEmpId#,
        #ProductUnitId#
			)
             ]]>
    </insert>

    <!-- update -->
    <update id="update" parameterClass="PCPenetrateCheck">
      <![CDATA[ 	UPDATE [PCPenetrateCheck] SET
				[ProductId] = #ProductId#,
				[EmployeeId] = #EmployeeId#,
				[InsertTime] = #InsertTime#,
				[UpdateTime] = #UpdateTime#,
				[PCPenetrateCheckDate] = #PCPenetrateCheckDate#,
				[PCPenetrateCheckQuantity] = #PCPenetrateCheckQuantity#,
				[InvoiceCusXOId] = #InvoiceCusXOId#,
				[PronoteHeaderId] = #PronoteHeaderId#,
				[mCheckStandard] = #mCheckStandard#,
				[InvoiceXOQuantity] = #InvoiceXOQuantity#,
				[PCPenetrateCheckDesc] = #PCPenetrateCheckDesc#,
				[PCPenetrateCheckLeftCount] = #PCPenetrateCheckLeftCount#,
				[PCPenetrateCheckRightCount] = #PCPenetrateCheckRightCount#,
				[PCPenetrateCheckCenterCount] = #PCPenetrateCheckCenterCount#,
				[IsPassing] = #IsPassing#,
        [AuditState]=#AuditState#,        
        [AuditEmpId]=#AuditEmpId#,
        [ProductUnitId] = #ProductUnitId#
			WHERE
				[PCPenetrateCheckId] = #PCPenetrateCheckId#
                    ]]>
    </update>
    <select id="existsPrimary" resultClass="bool" parameterClass="string">
      <![CDATA[
			select case when exists(
				select *
				from [dbo].[PCPenetrateCheck]
				where  PCPenetrateCheckId = #value#                 			                   
				)
				then 1 else 0 end
			]]>
    </select>

  </statements>
</sqlMap>

