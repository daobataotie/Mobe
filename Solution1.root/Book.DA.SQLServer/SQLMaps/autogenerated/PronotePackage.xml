<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="PronotePackage" xmlns="http://ibatis.apache.org/mapping"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <alias>
    <typeAlias alias="PronotePackage" type="Book.Model.PronotePackage, Book.Model" />
  </alias>
  <resultMaps>
    <resultMap id="PronotePackageResult" class="PronotePackage">
      <result property="PronotePackageId" column="PronotePackageId" />
      <result property="PronoteHeaderId" column="PronoteHeaderId" />
      <result property="PronotePackageDate" column="PronotePackageDate" />
      <result property="PronoteYearAndMonths" column="PronoteYearAndMonths" />
      <result property="ProductId" column="ProductId" />
      <result property="FullProductNum" column="FullProductNum" />
      <result property="BadProductNum" column="BadProductNum" />
      <result property="BadPercent" column="BadPercent" />
      <result property="Total" column="Total" />
      <result property="BlackPoint" column="BlackPoint" />
      <result property="GuoHuo" column="GuoHuo" />
      <result property="QiPao" column="QiPao" />
      <result property="WanMo" column="WanMo" />
      <result property="SuoShui" column="SuoShui" />
      <result property="MianXu" column="MianXu" />
      <result property="ZaZhi" column="ZaZhi" />
      <result property="LiuHen" column="LiuHen" />
      <result property="CaShang" column="CaShang" />
      <result property="PenYao" column="PenYao" />
      <result property="LouGuang" column="LouGuang" />
      <result property="Others" column="Others" />
      <result property="GuaShang" column="GuaShang" />
      <result property="Box" column="Box" />
      <result property="Feet" column="Feet" />
      <result property="InsertTime" column="InsertTime" />
      <result property="UpdateTime" column="UpdateTime" />
      <result property="Product" column="ProductId" lazyLoad="false" select="Product.select_SimpleProduct" />
      <result property="PronoteHeader" column="PronoteHeaderId" lazyLoad="false" select="PronoteHeader.select_by_primary_key" />
    </resultMap>
  </resultMaps>

  <statements>
    <select id="has_rows_of" resultClass="bool">
      select case when exists(
      SELECT
      *
      FROM
      [dbo].[PronotePackage]
      WHERE
      [PronotePackageId] = #PronotePackageId#
      ) then 1 else 0 end
    </select>
    <select id="has_rows" resultClass="bool">
      select case when exists(
      SELECT
      *
      FROM
      [dbo].[PronotePackage]

      ) then 1 else 0 end
    </select>
    <select id="get_first" resultMap="PronotePackageResult">
      <![CDATA[
			select top 1 *
			from dbo.PronotePackage 
			order by InsertTime
			]]>
    </select>
    <select id="get_last" resultMap="PronotePackageResult">
      <![CDATA[
			select top 1 *
			from dbo.PronotePackage 			
			order by InsertTime desc
			]]>
    </select>
    <select id="get_prev" resultMap="PronotePackageResult" parameterClass="PronotePackage">
      <![CDATA[
			select top 1 *
			from dbo.PronotePackage
			where InsertTime < #InsertTime#
			order by InsertTime desc
			]]>
    </select>
    <select id="get_next" resultMap="PronotePackageResult" parameterClass="PronotePackage">
      <![CDATA[
			select top 1 *
			from dbo.PronotePackage
			where InsertTime > #InsertTime#
			order by InsertTime
			]]>
    </select>
    <select id="has_rows_before" resultClass="bool" parameterClass="PronotePackage">
      <![CDATA[
			select case when exists(
				select * 
				from dbo.PronotePackage
				where InsertTime < #InsertTime#
				) 
				then 1 else 0 end
			]]>
    </select>

    <select id="has_rows_after" resultClass="bool" parameterClass="PronotePackage">
      <![CDATA[
			select case when exists(
				select * 
				from dbo.PronotePackage
				where InsertTime > #InsertTime#
				) then 1 else 0 end
			]]>
    </select>
    <!-- select by primary key -->
    <select id="select_by_primary_key" resultMap="PronotePackageResult" parameterClass="PronotePackage">
      SELECT
      [PronotePackageId],
      [PronoteHeaderId],
      [PronotePackageDate],
      [PronoteYearAndMonths],
      [ProductId],
      [FullProductNum],
      [BadProductNum],
      [BadPercent],
      [Total],
      [BlackPoint],
      [GuoHuo],
      [QiPao],
      [WanMo],
      [SuoShui],
      [MianXu],
      [ZaZhi],
      [LiuHen],
      [CaShang],
      [PenYao],
      [LouGuang],
      [Others],
      [GuaShang],
      [Box],
      [Feet],
      [InsertTime],
      [UpdateTime]
      FROM
      [dbo].[PronotePackage]
      WHERE
      [PronotePackageId] = #PronotePackageId#
    </select>

    <!-- delete -->
    <delete id="delete" parameterClass="string">
      DELETE FROM [dbo].[PronotePackage]
      WHERE
      [PronotePackageId] = #PronotePackageId#
    </delete>

    <!-- select all -->
    <select id="select_all" resultMap="PronotePackageResult" >
      SELECT *
      FROM
      [dbo].[PronotePackage]

      ORDER BY InsertTime DESC

    </select>

    <select id="count_all" resultClass="int">
      select count(*)
      from
      [dbo].[PronotePackage]
    </select>

    <select id="select_all_with_paging" resultMap="PronotePackageResult">
      SELECT *
      FROM
      (
      SELECT *, row_number() over(order by $OrderStatement$) rownumber
      FROM
      [dbo].[PronotePackage]
      ) t
      WHERE t.rownumber between #Row1# and #Row2#
    </select>

    <!-- insert -->
    <insert id="insert" parameterClass="PronotePackage">
      INSERT INTO [dbo].[PronotePackage]
      (
      [PronotePackageId],
      [PronoteHeaderId],
      [PronotePackageDate],
      [PronoteYearAndMonths],
      [ProductId],
      [FullProductNum],
      [BadProductNum],
      [BadPercent],
      [Total],
      [BlackPoint],
      [GuoHuo],
      [QiPao],
      [WanMo],
      [SuoShui],
      [MianXu],
      [ZaZhi],
      [LiuHen],
      [CaShang],
      [PenYao],
      [LouGuang],
      [Others],
      [GuaShang],
      [Box],
      [Feet],
      [InsertTime],
      [UpdateTime]
      )
      VALUES
      (
      #PronotePackageId#,
      #PronoteHeaderId#,
      #PronotePackageDate#,
      #PronoteYearAndMonths#,
      #ProductId#,
      #FullProductNum#,
      #BadProductNum#,
      #BadPercent#,
      #Total#,
      #BlackPoint#,
      #GuoHuo#,
      #QiPao#,
      #WanMo#,
      #SuoShui#,
      #MianXu#,
      #ZaZhi#,
      #LiuHen#,
      #CaShang#,
      #PenYao#,
      #LouGuang#,
      #Others#,
      #GuaShang#,
      #Box#,
      #Feet#,
      #InsertTime#,
      #UpdateTime#
      )
    </insert>

    <!-- update -->
    <update id="update" parameterClass="PronotePackage">
      UPDATE [PronotePackage] SET
      [PronoteHeaderId] = #PronoteHeaderId#,
      [PronotePackageDate] = #PronotePackageDate#,
      [PronoteYearAndMonths] = #PronoteYearAndMonths#,
      [ProductId] = #ProductId#,
      [FullProductNum] = #FullProductNum#,
      [BadProductNum] = #BadProductNum#,
      [BadPercent] = #BadPercent#,
      [Total] = #Total#,
      [BlackPoint] = #BlackPoint#,
      [GuoHuo] = #GuoHuo#,
      [QiPao] = #QiPao#,
      [WanMo] = #WanMo#,
      [SuoShui] = #SuoShui#,
      [MianXu] = #MianXu#,
      [ZaZhi] = #ZaZhi#,
      [LiuHen] = #LiuHen#,
      [CaShang] = #CaShang#,
      [PenYao] = #PenYao#,
      [LouGuang] = #LouGuang#,
      [Others] = #Others#,
      [GuaShang] = #GuaShang#,
      [Box] = #Box#,
      [Feet] = #Feet#,
      [InsertTime] = #InsertTime#,
      [UpdateTime] = #UpdateTime#
      WHERE
      [PronotePackageId] = #PronotePackageId#
    </update>
    <select id="existsPrimary" resultClass="bool" parameterClass="string">
      <![CDATA[
			select case when exists(
				select *
				from [dbo].[PronotePackage]
				where  PronotePackageId = #value# 
				)
				then 1 else 0 end
			]]>
    </select>

  </statements>
</sqlMap>

