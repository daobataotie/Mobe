<?xml version="1.0" encoding="utf-8" ?> 
<sqlMap namespace="AcademicBackGround" xmlns="http://ibatis.apache.org/mapping" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <alias>
        <typeAlias alias="AcademicBackGround" type="Book.Model.AcademicBackGround, Book.Model" />
    </alias>
    <resultMaps>                                    
        <resultMap id="AcademicBackGroundResult" class="AcademicBackGround">
			<result property="AcademicBackGroundId" column="AcademicBackGroundId" />
			<result property="InsertTime" column="InsertTime" />
			<result property="UpdateTime" column="UpdateTime" />
			<result property="AcademicBackGroundName" column="AcademicBackGroundName" />
			<result property="Description" column="Description" />
        </resultMap>
    </resultMaps>
    <statements>      
		<select id="has_rows_of" resultClass="bool">
			select case when exists(
				SELECT
					*
				FROM
					[dbo].[AcademicBackGround]
				WHERE
				[AcademicBackGroundId] = #AcademicBackGroundId#
				) then 1 else 0 end
		</select>
		<select id="has_rows" resultClass="bool">
			select case when exists(
				SELECT
					*
				FROM
					[dbo].[AcademicBackGround]
 								
				) then 1 else 0 end
		</select>
		<select id="get_first" resultMap="AcademicBackGroundResult">
			<![CDATA[
			select top 1 *
			from dbo.AcademicBackGround 
			order by InsertTime
			]]>
		</select>
		<select id="get_last" resultMap="AcademicBackGroundResult">
			<![CDATA[
			select top 1 *
			from dbo.AcademicBackGround 			
			order by InsertTime desc
			]]>
		</select>
		<select id="get_prev" resultMap="AcademicBackGroundResult" parameterClass="AcademicBackGround">
			<![CDATA[
			select top 1 *
			from dbo.AcademicBackGround
			where InsertTime < #InsertTime#
			order by InsertTime desc
			]]>
		</select>
		<select id="get_next" resultMap="AcademicBackGroundResult" parameterClass="AcademicBackGround">
			<![CDATA[
			select top 1 *
			from dbo.AcademicBackGround
			where InsertTime > #InsertTime#
			order by InsertTime
			]]>
		</select>
		<select id="has_rows_before" resultClass="bool" parameterClass="AcademicBackGround">
			<![CDATA[
			select case when exists(
				select * 
				from dbo.AcademicBackGround
				where InsertTime < #InsertTime#
				) 
				then 1 else 0 end
			]]>
		</select>
		
		<select id="has_rows_after" resultClass="bool" parameterClass="AcademicBackGround">
			<![CDATA[
			select case when exists(
				select * 
				from dbo.AcademicBackGround
				where InsertTime > #InsertTime#
				) then 1 else 0 end
			]]>
		</select>
		<!-- select by primary key -->
        <select id="select_by_primary_key" resultMap="AcademicBackGroundResult" parameterClass="AcademicBackGround">
			SELECT
				[AcademicBackGroundId],
				[InsertTime],
				[UpdateTime],
				[AcademicBackGroundName],
				[Description]
			FROM
				[dbo].[AcademicBackGround]
			WHERE
				[AcademicBackGroundId] = #AcademicBackGroundId#
        </select>
		
		<!-- delete -->
        <delete id="delete" parameterClass="string">
			DELETE FROM [dbo].[AcademicBackGround]
			WHERE
				[AcademicBackGroundId] = #AcademicBackGroundId#
        </delete>

		<!-- select all -->
        <select id="select_all" resultMap="AcademicBackGroundResult" >
			SELECT *
			FROM 
				[dbo].[AcademicBackGround]
			ORDER BY AcademicBackGroundId ASC
        </select>
        
		<select id="count_all" resultClass="int">
			select count(*)
			from 
				[dbo].[AcademicBackGround]
		</select>
		
		<select id="select_all_with_paging" resultMap="AcademicBackGroundResult">
            SELECT *
            FROM
            (
                SELECT *, row_number() over(order by $OrderStatement$) rownumber
                FROM    
                    [dbo].[AcademicBackGround]
            ) t
            WHERE t.rownumber between #Row1# and #Row2#
		</select>
		
		<!-- insert -->
        <insert id="insert" parameterClass="AcademicBackGround">
			INSERT INTO [dbo].[AcademicBackGround] 
			(
				[AcademicBackGroundId],
				[InsertTime],
				[UpdateTime],
				[AcademicBackGroundName],
				[Description]
			) 
			VALUES 
			(
				#AcademicBackGroundId#,
				#InsertTime#,
				#UpdateTime#,
				#AcademicBackGroundName#,
				#Description#
			)
        </insert>
		
		<!-- update -->
        <update id="update" parameterClass="AcademicBackGround">
			UPDATE [AcademicBackGround] SET
				[InsertTime] = #InsertTime#,
				[UpdateTime] = #UpdateTime#,
				[AcademicBackGroundName] = #AcademicBackGroundName#,
				[Description] = #Description#
			WHERE
				[AcademicBackGroundId] = #AcademicBackGroundId#
        </update>
		
		
    </statements>
</sqlMap>

