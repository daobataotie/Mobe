<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="StockEditor" xmlns="http://ibatis.apache.org/mapping"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <alias>
    <typeAlias alias="StockEditor" type="Book.Model.StockEditor, Book.Model" />
  </alias>
  <resultMaps>
    <resultMap id="StockEditorResult" class="StockEditor">
      <result property="StockEditorId" column="StockEditorId" />
      <result property="EmployeeId" column="EmployeeId" />
      <result property="Employee0Id" column="Employee0Id" />
      <result property="DepotId" column="DepotId" />
      <result property="InsertTime" column="InsertTime" />
      <result property="UpdateTime" column="UpdateTime" />
      <result property="StockEditorDate" column="StockEditorDate" />
      <result property="Directions" column="Directions" />
      <result property="ProductCategoryId" column="ProductCategoryId" />
      <result property="IsStockCheck" column="IsStockCheck" />
      <result property="AuditState" column="AuditState" />
      <result property="AuditEmpId" column="AuditEmpId" />
      <result property="Employee0" column="Employee0Id" lazyLoad="false" select="Employee.select_SimpleEmployee" />
      <result property="Depot" column="DepotId" lazyLoad="false" select="Depot.select_by_primary_key" />
      <result property="Employee" column="EmployeeId" lazyLoad="false" select="Employee.select_SimpleEmployee" />
      <result property="AuditEmp" column="AuditEmpId" lazyLoad="false" select="Employee.select_SimpleEmployee" />
    </resultMap>
  </resultMaps>

  <statements>
    <select id="has_rows_of" resultClass="bool">
      select case when exists(
      SELECT
      *
      FROM
      [dbo].[StockEditor]
      WHERE
      [StockEditorId] = #StockEditorId#
      ) then 1 else 0 end
    </select>
    <select id="has_rows" resultClass="bool">
      select case when exists(
      SELECT
      *
      FROM
      [dbo].[StockEditor]

      ) then 1 else 0 end
    </select>
    <select id="get_first" resultMap="StockEditorResult">
      <![CDATA[
			select top 1 *
			from dbo.StockEditor 
			order by InsertTime
			]]>
    </select>
    <select id="get_last" resultMap="StockEditorResult">
      <![CDATA[
			select top 1 *
			from dbo.StockEditor 			
			order by InsertTime desc
			]]>
    </select>
    <select id="get_prev" resultMap="StockEditorResult" parameterClass="StockEditor">
      <![CDATA[
			select top 1 *
			from dbo.StockEditor
			where InsertTime < #InsertTime#
			order by InsertTime desc
			]]>
    </select>
    <select id="get_next" resultMap="StockEditorResult" parameterClass="StockEditor">
      <![CDATA[
			select top 1 *
			from dbo.StockEditor
			where InsertTime > #InsertTime#
			order by InsertTime
			]]>
    </select>
    <select id="has_rows_before" resultClass="bool" parameterClass="StockEditor">
      <![CDATA[
			select case when exists(
				select * 
				from dbo.StockEditor
				where InsertTime < #InsertTime#
				) 
				then 1 else 0 end
			]]>
    </select>

    <select id="has_rows_after" resultClass="bool" parameterClass="StockEditor">
      <![CDATA[
			select case when exists(
				select * 
				from dbo.StockEditor
				where InsertTime > #InsertTime#
				) then 1 else 0 end
			]]>
    </select>
    <!-- select by primary key -->
    <select id="select_by_primary_key" resultMap="StockEditorResult" parameterClass="StockEditor">
      SELECT
      [StockEditorId],
      [EmployeeId],
      [Employee0Id],
      [DepotId],
      [InsertTime],
      [UpdateTime],
      [StockEditorDate],
      [Directions],
      [ProductCategoryId],
      [IsStockCheck],
      [AuditState],
      [AuditEmpId]
      FROM
      [dbo].[StockEditor]
      WHERE
      [StockEditorId] = #StockEditorId#
    </select>

    <!-- delete -->
    <delete id="delete" parameterClass="string">
      DELETE FROM [dbo].[StockEditor]
      WHERE
      [StockEditorId] = #StockEditorId#
    </delete>

    <!-- select all -->
    <select id="select_all" resultMap="StockEditorResult" >
      SELECT *
      FROM
      [dbo].[StockEditor]


    </select>

    <select id="count_all" resultClass="int">
      select count(*)
      from
      [dbo].[StockEditor]
    </select>

    <select id="select_all_with_paging" resultMap="StockEditorResult">
      SELECT *
      FROM
      (
      SELECT *, row_number() over(order by $OrderStatement$) rownumber
      FROM
      [dbo].[StockEditor]
      ) t
      WHERE t.rownumber between #Row1# and #Row2#
    </select>

    <!-- insert -->
    <insert id="insert" parameterClass="StockEditor">
      INSERT INTO [dbo].[StockEditor]
      (
      [StockEditorId],
      [EmployeeId],
      [Employee0Id],
      [DepotId],
      [InsertTime],
      [UpdateTime],
      [StockEditorDate],
      [Directions],
      [ProductCategoryId],
      [IsStockCheck],
      [AuditState],
      [AuditEmpId]
      )
      VALUES
      (
      #StockEditorId#,
      #EmployeeId#,
      #Employee0Id#,
      #DepotId#,
      #InsertTime#,
      #UpdateTime#,
      #StockEditorDate#,
      #Directions#,
      #ProductCategoryId#,
      #IsStockCheck#,
      #AuditState#,
      #AuditEmpId#
      )
    </insert>

    <!-- update -->
    <update id="update" parameterClass="StockEditor">
      UPDATE [StockEditor] SET
      [EmployeeId] = #EmployeeId#,
      [Employee0Id] = #Employee0Id#,
      [DepotId] = #DepotId#,
      [InsertTime] = #InsertTime#,
      [UpdateTime] = #UpdateTime#,
      [StockEditorDate] = #StockEditorDate#,
      [Directions] = #Directions#,
      [ProductCategoryId] = #ProductCategoryId#,
      [IsStockCheck] = #IsStockCheck#,
      [AuditState]=#AuditState#,
      [AuditEmpId]=#AuditEmpId#
      WHERE
      [StockEditorId] = #StockEditorId#
    </update>
    <select id="existsPrimary" resultClass="bool" parameterClass="string">
      <![CDATA[
			select case when exists(
				select *
				from [dbo].[StockEditor]
				where  StockEditorId = #value# 
				)
				then 1 else 0 end
			]]>
    </select>

  </statements>
</sqlMap>

