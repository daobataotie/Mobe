<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="ProduceOtherInDepotDetail" xmlns="http://ibatis.apache.org/mapping"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <alias>
    <typeAlias alias="ProduceOtherInDepotDetail" type="Book.Model.ProduceOtherInDepotDetail, Book.Model" />
  </alias>
  <resultMaps>
    <resultMap id="ProduceOtherInDepotDetailResult" class="ProduceOtherInDepotDetail">
      <result property="ProduceOtherInDepotDetailId" column="ProduceOtherInDepotDetailId" />
      <result property="ProductId" column="ProductId" />
      <result property="DepotPositionId" column="DepotPositionId" />
      <result property="ProduceOtherInDepotId" column="ProduceOtherInDepotId" />
      <result property="ProductGuige" column="ProductGuige" />
      <result property="ProductUnit" column="ProductUnit" />
      <result property="ProduceQuantity" column="ProduceQuantity" />
      <result property="ProducePrice" column="ProducePrice" />
      <result property="ProduceMoney" column="ProduceMoney" />
      <result property="ProcessPrice" column="ProcessPrice" />
      <result property="ProduceIsEnd" column="ProduceIsEnd" />
      <result property="InvoiceXOId" column="InvoiceXOId" />
      <result property="InvoiceXODetailId" column="InvoiceXODetailId" />
      <result property="PrimaryKeyId" column="PrimaryKeyId" />
      <result property="ProduceOtherCompactDetailId" column="ProduceOtherCompactDetailId" />
      <result property="Description" column="Description" />
      <result property="ProduceTransferQuantity" column="ProduceTransferQuantity" />
      <result property="ProduceInDepotQuantity" column="ProduceInDepotQuantity" />
      <result property="CustomerId" column="CustomerId" />
      <result property="InvoiceCusId" column="InvoiceCusId" />
      <result property="ProduceOtherCompactId" column="ProduceOtherCompactId" />
      <result property="HandbookId" column="HandbookId"/>
      <result property="HandbookProductId" column="HandbookProductId"/>
      <result property="Customer" column="CustomerId" lazyLoad="false" select="Customer.select_SimpleCustomer" />
      <result property="PrimaryKey" column="PrimaryKeyId" lazyLoad="false" select="CustomerProducts.select_by_primary_key" />
      <result property="DepotPosition" column="DepotPositionId" lazyLoad="false" select="DepotPosition.select_by_primary_key" />
      <result property="ProduceOtherInDepot" column="ProduceOtherInDepotId" lazyLoad="false" select="ProduceOtherInDepot.select_by_primary_key" />
      <result property="Product" column="ProductId" lazyLoad="false" select="Product.select_SimpleProduct" />
    </resultMap>
  </resultMaps>

  <statements>
    <select id="has_rows_of" resultClass="bool">
      <![CDATA[select case when exists(
				SELECT
					*
				FROM
					[dbo].[ProduceOtherInDepotDetail]
				WHERE
				[ProduceOtherInDepotDetailId] = #ProduceOtherInDepotDetailId#
                        			                   
				) then 1 else 0 end
                ]]>
    </select>
    <select id="has_rows" resultClass="bool">
      <![CDATA[select case when exists(
				SELECT
					*
				FROM
					[dbo].[ProduceOtherInDepotDetail]
 								
				) then 1 else 0 end
                ]]>
    </select>
    <!-- select by primary key -->
    <select id="select_by_primary_key" resultMap="ProduceOtherInDepotDetailResult" parameterClass="ProduceOtherInDepotDetail">
      <![CDATA[SELECT
				[ProduceOtherInDepotDetailId],
				[ProductId],
				[DepotPositionId],
				[ProduceOtherInDepotId],
				[ProductGuige],
				[ProductUnit],
				[ProduceQuantity],
				[ProducePrice],
				[ProduceMoney],
				[ProcessPrice],
				[ProduceIsEnd],
				[InvoiceXOId],
				[InvoiceXODetailId],
				[PrimaryKeyId],
				[ProduceOtherCompactDetailId],
				[Description],
				[ProduceTransferQuantity],
				[ProduceInDepotQuantity],
				[CustomerId],
				[InvoiceCusId],
				[ProduceOtherCompactId],
        [HandbookId],
        [HandbookProductId]
			FROM
				[dbo].[ProduceOtherInDepotDetail]
			WHERE
				[ProduceOtherInDepotDetailId] = #ProduceOtherInDepotDetailId#
                			          
         		]]>
    </select>

    <!-- delete -->
    <delete id="delete" parameterClass="string">
      <![CDATA[                
                DELETE FROM [dbo].[ProduceOtherInDepotDetail]
			WHERE            
				[ProduceOtherInDepotDetailId] = #ProduceOtherInDepotDetailId#
                    		]]>
    </delete>

    <!-- select all -->
    <select id="select_all" resultMap="ProduceOtherInDepotDetailResult" >
      <![CDATA[SELECT *
			FROM 
				[dbo].[ProduceOtherInDepotDetail]
                			                   

			]]>
    </select>

    <select id="count_all" resultClass="int">
      <![CDATA[	select count(*)
			from 
				[dbo].[ProduceOtherInDepotDetail]
                			          
         ]]>
    </select>

    <select id="select_all_with_paging" resultMap="ProduceOtherInDepotDetailResult">
      <![CDATA[    SELECT *
            FROM
            (
                SELECT *, row_number() over(order by $OrderStatement$) rownumber
                FROM    
                    [dbo].[ProduceOtherInDepotDetail]
                    			          
         
            ) t
            WHERE t.rownumber between #Row1# and #Row2#
             ]]>
    </select>

    <!-- insert -->
    <insert id="insert" parameterClass="ProduceOtherInDepotDetail">
      <![CDATA[ INSERT INTO [dbo].[ProduceOtherInDepotDetail] 
			(
				[ProduceOtherInDepotDetailId],
				[ProductId],
				[DepotPositionId],
				[ProduceOtherInDepotId],
				[ProductGuige],
				[ProductUnit],
				[ProduceQuantity],
				[ProducePrice],
				[ProduceMoney],
				[ProcessPrice],
				[ProduceIsEnd],
				[InvoiceXOId],
				[InvoiceXODetailId],
				[PrimaryKeyId],
				[ProduceOtherCompactDetailId],
				[Description],
				[ProduceTransferQuantity],
				[ProduceInDepotQuantity],
				[CustomerId],
				[InvoiceCusId],
				[ProduceOtherCompactId],
        [HandbookId],
        [HandbookProductId]
			) 
			VALUES 
			(
				#ProduceOtherInDepotDetailId#,
				#ProductId#,
				#DepotPositionId#,
				#ProduceOtherInDepotId#,
				#ProductGuige#,
				#ProductUnit#,
				#ProduceQuantity#,
				#ProducePrice#,
				#ProduceMoney#,
				#ProcessPrice#,
				#ProduceIsEnd#,
				#InvoiceXOId#,
				#InvoiceXODetailId#,
				#PrimaryKeyId#,
				#ProduceOtherCompactDetailId#,
				#Description#,
				#ProduceTransferQuantity#,
				#ProduceInDepotQuantity#,
				#CustomerId#,
				#InvoiceCusId#,
				#ProduceOtherCompactId#,
        #HandbookId#,
        #HandbookProductId#
			)
             ]]>
    </insert>

    <!-- update -->
    <update id="update" parameterClass="ProduceOtherInDepotDetail">
      <![CDATA[ 	UPDATE [ProduceOtherInDepotDetail] SET
				[ProductId] = #ProductId#,
				[DepotPositionId] = #DepotPositionId#,
				[ProduceOtherInDepotId] = #ProduceOtherInDepotId#,
				[ProductGuige] = #ProductGuige#,
				[ProductUnit] = #ProductUnit#,
				[ProduceQuantity] = #ProduceQuantity#,
				[ProducePrice] = #ProducePrice#,
				[ProduceMoney] = #ProduceMoney#,
				[ProcessPrice] = #ProcessPrice#,
				[ProduceIsEnd] = #ProduceIsEnd#,
				[InvoiceXOId] = #InvoiceXOId#,
				[InvoiceXODetailId] = #InvoiceXODetailId#,
				[PrimaryKeyId] = #PrimaryKeyId#,
				[ProduceOtherCompactDetailId] = #ProduceOtherCompactDetailId#,
				[Description] = #Description#,
				[ProduceTransferQuantity] = #ProduceTransferQuantity#,
				[ProduceInDepotQuantity] = #ProduceInDepotQuantity#,
				[CustomerId] = #CustomerId#,
				[InvoiceCusId] = #InvoiceCusId#,
				[ProduceOtherCompactId] = #ProduceOtherCompactId#,
        [HandbookId]=#HandbookId#,
        [HandbookProductId]=#HandbookProductId#
			WHERE
				[ProduceOtherInDepotDetailId] = #ProduceOtherInDepotDetailId#
                    ]]>
    </update>
    <select id="existsPrimary" resultClass="bool" parameterClass="string">
      <![CDATA[
			select case when exists(
				select *
				from [dbo].[ProduceOtherInDepotDetail]
				where  ProduceOtherInDepotDetailId = #value#                 			                   
				)
				then 1 else 0 end
			]]>
    </select>

  </statements>
</sqlMap>

