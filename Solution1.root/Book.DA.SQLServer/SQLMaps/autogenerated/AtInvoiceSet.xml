<?xml version="1.0" encoding="utf-8" ?> 
<sqlMap namespace="AtInvoiceSet" xmlns="http://ibatis.apache.org/mapping" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <alias>
        <typeAlias alias="AtInvoiceSet" type="Book.Model.AtInvoiceSet, Book.Model" />
    </alias>
    <resultMaps>                                    
        <resultMap id="AtInvoiceSetResult" class="AtInvoiceSet">
			<result property="Id" column="Id" />
			<result property="InvoiceYear" column="InvoiceYear" />
			<result property="StartMaths" column="StartMaths" />
			<result property="EndMaths" column="EndMaths" />
			<result property="InvoiceForm" column="InvoiceForm" />
			<result property="StartInvoiceId" column="StartInvoiceId" />
			<result property="EndInvoiceId" column="EndInvoiceId" />
			<result property="TheId" column="TheId" />
			<result property="InvoiceWord" column="InvoiceWord" />
			<result property="InvoiceCount" column="InvoiceCount" />
			<result property="InsertTime" column="InsertTime" />
			<result property="UpdateTime" column="UpdateTime" />

        </resultMap>
    </resultMaps>
		
    <statements>
		<select id="has_rows_of" resultClass="bool">
			select case when exists(
				SELECT
					*
				FROM
					[dbo].[AtInvoiceSet]
				WHERE
				[Id] = #Id#
				) then 1 else 0 end
		</select>
		<select id="has_rows" resultClass="bool">
			select case when exists(
				SELECT
					*
				FROM
					[dbo].[AtInvoiceSet]
 								
				) then 1 else 0 end
		</select>
		<select id="get_first" resultMap="AtInvoiceSetResult">
			<![CDATA[
			select top 1 *
			from dbo.AtInvoiceSet 
			order by InsertTime
			]]>
		</select>
		<select id="get_last" resultMap="AtInvoiceSetResult">
			<![CDATA[
			select top 1 *
			from dbo.AtInvoiceSet 			
			order by InsertTime desc
			]]>
		</select>
		<select id="get_prev" resultMap="AtInvoiceSetResult" parameterClass="AtInvoiceSet">
			<![CDATA[
			select top 1 *
			from dbo.AtInvoiceSet
			where InsertTime < #InsertTime#
			order by InsertTime desc
			]]>
		</select>
		<select id="get_next" resultMap="AtInvoiceSetResult" parameterClass="AtInvoiceSet">
			<![CDATA[
			select top 1 *
			from dbo.AtInvoiceSet
			where InsertTime > #InsertTime#
			order by InsertTime
			]]>
		</select>
		<select id="has_rows_before" resultClass="bool" parameterClass="AtInvoiceSet">
			<![CDATA[
			select case when exists(
				select * 
				from dbo.AtInvoiceSet
				where InsertTime < #InsertTime#
				) 
				then 1 else 0 end
			]]>
		</select>
		
		<select id="has_rows_after" resultClass="bool" parameterClass="AtInvoiceSet">
			<![CDATA[
			select case when exists(
				select * 
				from dbo.AtInvoiceSet
				where InsertTime > #InsertTime#
				) then 1 else 0 end
			]]>
		</select>
		<!-- select by primary key -->
        <select id="select_by_primary_key" resultMap="AtInvoiceSetResult" parameterClass="AtInvoiceSet">
			SELECT
				[Id],
				[InvoiceYear],
				[StartMaths],
				[EndMaths],
				[InvoiceForm],
				[StartInvoiceId],
				[EndInvoiceId],
				[TheId],
				[InvoiceWord],
				[InvoiceCount],
				[InsertTime],
				[UpdateTime]
			FROM
				[dbo].[AtInvoiceSet]
			WHERE
				[Id] = #Id#
        </select>
		
		<!-- delete -->
        <delete id="delete" parameterClass="string">
			DELETE FROM [dbo].[AtInvoiceSet]
			WHERE
				[Id] = #Id#
        </delete>

		<!-- select all -->
        <select id="select_all" resultMap="AtInvoiceSetResult" >
			SELECT *
			FROM 
				[dbo].[AtInvoiceSet]
			
				
			ORDER BY Id ASC
			
			
        </select>
        
		<select id="count_all" resultClass="int">
			select count(*)
			from 
				[dbo].[AtInvoiceSet]
		</select>
		
		<select id="select_all_with_paging" resultMap="AtInvoiceSetResult">
            SELECT *
            FROM
            (
                SELECT *, row_number() over(order by $OrderStatement$) rownumber
                FROM    
                    [dbo].[AtInvoiceSet]
            ) t
            WHERE t.rownumber between #Row1# and #Row2#
		</select>
		
		<!-- insert -->
        <insert id="insert" parameterClass="AtInvoiceSet">
			INSERT INTO [dbo].[AtInvoiceSet] 
			(
				[Id],
				[InvoiceYear],
				[StartMaths],
				[EndMaths],
				[InvoiceForm],
				[StartInvoiceId],
				[EndInvoiceId],
				[TheId],
				[InvoiceWord],
				[InvoiceCount],
				[InsertTime],
				[UpdateTime]
			) 
			VALUES 
			(
				#Id#,
				#InvoiceYear#,
				#StartMaths#,
				#EndMaths#,
				#InvoiceForm#,
				#StartInvoiceId#,
				#EndInvoiceId#,
				#TheId#,
				#InvoiceWord#,
				#InvoiceCount#,
				#InsertTime#,
				#UpdateTime#
			)
        </insert>
		
		<!-- update -->
        <update id="update" parameterClass="AtInvoiceSet">
			UPDATE [AtInvoiceSet] SET
				[InvoiceYear] = #InvoiceYear#,
				[StartMaths] = #StartMaths#,
				[EndMaths] = #EndMaths#,
				[InvoiceForm] = #InvoiceForm#,
				[StartInvoiceId] = #StartInvoiceId#,
				[EndInvoiceId] = #EndInvoiceId#,
				[TheId] = #TheId#,
				[InvoiceWord] = #InvoiceWord#,
				[InvoiceCount] = #InvoiceCount#,
				[InsertTime] = #InsertTime#,
				[UpdateTime] = #UpdateTime#
			WHERE
				[Id] = #Id#
        </update>
		<select id="existsPrimary" resultClass="bool" parameterClass="string">
			<![CDATA[
			select case when exists(
				select *
				from [dbo].[AtInvoiceSet]
				where  Id = #value# 
				)
				then 1 else 0 end
			]]>
		</select>
		<select id="exists" resultClass="bool" parameterClass="string">
			<![CDATA[
			select case when exists(
				select * 
				from dbo.AtInvoiceSet
				where Id = #value#
				) then 1 else 0 end
			]]>
		</select>
		
		<select id="get_by_id" resultMap="AtInvoiceSetResult" parameterClass="string">
			<![CDATA[
			SELECT top 1
				*
			FROM
				[dbo].[AtInvoiceSet]
			WHERE
				Id = #value#
			]]>	
        </select>
		
		<select id="existsexcept" resultClass="bool" parameterClass="string">
			<![CDATA[
			select case when exists(
				select *
				from dbo.AtInvoiceSet
				where Id = #newId# and Id <> #oldId#
				)
				then 1 else 0 end
			]]>
		</select>		
		
		
    </statements>
</sqlMap>

